{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./json-database.service\";\nexport class AuthService {\n  constructor(dbService) {\n    this.dbService = dbService;\n    this.isAuthenticated = new BehaviorSubject(this.hasToken());\n    this.currentUser = new BehaviorSubject(this.getStoredUser());\n    this.tokenKey = 'auth_token';\n    this.userKey = 'current_user';\n  }\n  /**\r\n   * Вход в систему\r\n   */\n  login(username, password) {\n    try {\n      // Валидация входных данных\n      if (!username || !password) {\n        return {\n          success: false,\n          error: 'Имя пользователя и пароль обязательны'\n        };\n      }\n      if (username.trim().length < 3) {\n        return {\n          success: false,\n          error: 'Имя пользователя должно содержать минимум 3 символа'\n        };\n      }\n      const result = this.dbService.validateAdmin(username.trim(), password);\n      if (result.success && result.user) {\n        // Создаем простой \"токен\" (в реальном приложении нужно использовать JWT)\n        const tokenData = {\n          id: result.user.id,\n          username: result.user.username,\n          exp: Date.now() + 24 * 60 * 60 * 1000 // 24 часа\n        };\n        const token = btoa(JSON.stringify(tokenData));\n        // Сохраняем в localStorage\n        localStorage.setItem(this.tokenKey, token);\n        localStorage.setItem(this.userKey, JSON.stringify(result.user));\n        // Обновляем состояния\n        this.isAuthenticated.next(true);\n        this.currentUser.next(result.user);\n        console.log('Успешный вход пользователя:', result.user.username);\n        return {\n          success: true,\n          user: result.user\n        };\n      }\n      return {\n        success: false,\n        error: 'Неверное имя пользователя или пароль'\n      };\n    } catch (error) {\n      console.error('Ошибка входа:', error);\n      return {\n        success: false,\n        error: 'Произошла ошибка при входе в систему'\n      };\n    }\n  }\n  /**\r\n   * Выход из системы\r\n   */\n  logout() {\n    const username = this.currentUser.value?.username;\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem(this.userKey);\n    this.isAuthenticated.next(false);\n    this.currentUser.next(null);\n    console.log('Пользователь вышел из системы:', username);\n  }\n  /**\r\n   * Проверка статуса аутентификации\r\n   */\n  isLoggedIn() {\n    return this.isAuthenticated.asObservable();\n  }\n  /**\r\n   * Получение текущего пользователя\r\n   */\n  getCurrentUser() {\n    return this.currentUser.asObservable();\n  }\n  /**\r\n   * Получение текущего пользователя (синхронно)\r\n   */\n  getCurrentUserSync() {\n    return this.currentUser.value;\n  }\n  /**\r\n   * Получение токена\r\n   */\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  /**\r\n   * Проверка валидности токена\r\n   */\n  validateToken() {\n    return this.hasToken();\n  }\n  /**\r\n   * Проверка прав администратора\r\n   */\n  isAdmin() {\n    return this.hasToken() && !!this.currentUser.value;\n  }\n  /**\r\n   * Получение имени текущего пользователя\r\n   */\n  getUsername() {\n    return this.currentUser.value?.username || null;\n  }\n  /**\r\n   * Получение ID текущего пользователя\r\n   */\n  getUserId() {\n    return this.currentUser.value?.id || null;\n  }\n  /**\r\n   * Обновление данных пользователя\r\n   */\n  updateUserData(user) {\n    if (this.currentUser.value?.id === user.id) {\n      this.currentUser.next(user);\n      localStorage.setItem(this.userKey, JSON.stringify(user));\n    }\n  }\n  /**\r\n   * Проверка, истек ли срок действия токена\r\n   */\n  isTokenExpired() {\n    const token = this.getToken();\n    if (!token) return true;\n    try {\n      const payload = JSON.parse(atob(token));\n      return payload.exp < Date.now();\n    } catch (error) {\n      console.error('Ошибка проверки токена:', error);\n      return true;\n    }\n  }\n  /**\r\n   * Автоматический вход при наличии валидного токена\r\n   */\n  autoLogin() {\n    if (this.hasToken() && !this.isTokenExpired()) {\n      const user = this.getStoredUser();\n      if (user) {\n        this.currentUser.next(user);\n        this.isAuthenticated.next(true);\n        console.log('Автоматический вход пользователя:', user.username);\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\r\n   * Очистка данных аутентификации\r\n   */\n  clearAuthData() {\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem(this.userKey);\n    this.isAuthenticated.next(false);\n    this.currentUser.next(null);\n  }\n  /**\r\n   * Проверка наличия токена\r\n   */\n  hasToken() {\n    const token = this.getToken();\n    if (!token) return false;\n    try {\n      const payload = JSON.parse(atob(token));\n      const isExpired = payload.exp < Date.now();\n      if (isExpired) {\n        this.clearAuthData();\n        return false;\n      }\n      return true;\n    } catch (error) {\n      console.error('Неверный формат токена:', error);\n      this.clearAuthData();\n      return false;\n    }\n  }\n  /**\r\n   * Получение пользователя из localStorage\r\n   */\n  getStoredUser() {\n    try {\n      const userStr = localStorage.getItem(this.userKey);\n      if (!userStr) return null;\n      const user = JSON.parse(userStr);\n      return user;\n    } catch (error) {\n      console.error('Ошибка чтения пользователя из localStorage:', error);\n      return null;\n    }\n  }\n  /**\r\n   * Создание тестового администратора (для разработки)\r\n   */\n  createTestAdmin() {\n    const testAdmin = {\n      username: 'test',\n      password: 'test123'\n    };\n    try {\n      this.dbService.createAdminUser(testAdmin);\n      console.log('Тестовый администратор создан:', testAdmin.username);\n    } catch (error) {\n      console.log('Тестовый администратор уже существует');\n    }\n  }\n  /**\r\n   * Получение информации о сессии\r\n   */\n  getSessionInfo() {\n    return {\n      isAuthenticated: this.isAuthenticated.value,\n      user: this.currentUser.value,\n      tokenExists: !!this.getToken(),\n      tokenValid: this.validateToken()\n    };\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.JsonDatabaseService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","AuthService","constructor","dbService","isAuthenticated","hasToken","currentUser","getStoredUser","tokenKey","userKey","login","username","password","success","error","trim","length","result","validateAdmin","user","tokenData","id","exp","Date","now","token","btoa","JSON","stringify","localStorage","setItem","next","console","log","logout","value","removeItem","isLoggedIn","asObservable","getCurrentUser","getCurrentUserSync","getToken","getItem","validateToken","isAdmin","getUsername","getUserId","updateUserData","isTokenExpired","payload","parse","atob","autoLogin","clearAuthData","isExpired","userStr","createTestAdmin","testAdmin","createAdminUser","getSessionInfo","tokenExists","tokenValid","i0","ɵɵinject","i1","JsonDatabaseService","factory","ɵfac","providedIn"],"sources":["D:\\employee-management\\src\\app\\shared\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { IAdminUser } from '../interfaces/employee.interface';\r\nimport { JsonDatabaseService } from './json-database.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated = new BehaviorSubject<boolean>(this.hasToken());\r\n  private currentUser = new BehaviorSubject<IAdminUser | null>(this.getStoredUser());\r\n  private tokenKey = 'auth_token';\r\n  private userKey = 'current_user';\r\n\r\n  constructor(private dbService: JsonDatabaseService) {}\r\n\r\n  /**\r\n   * Вход в систему\r\n   */\r\n  public login(username: string, password: string): { success: boolean; error?: string; user?: IAdminUser } {\r\n    try {\r\n      // Валидация входных данных\r\n      if (!username || !password) {\r\n        return { success: false, error: 'Имя пользователя и пароль обязательны' };\r\n      }\r\n\r\n      if (username.trim().length < 3) {\r\n        return { success: false, error: 'Имя пользователя должно содержать минимум 3 символа' };\r\n      }\r\n\r\n      const result = this.dbService.validateAdmin(username.trim(), password);\r\n      \r\n      if (result.success && result.user) {\r\n        // Создаем простой \"токен\" (в реальном приложении нужно использовать JWT)\r\n        const tokenData = {\r\n          id: result.user.id,\r\n          username: result.user.username,\r\n          exp: Date.now() + (24 * 60 * 60 * 1000) // 24 часа\r\n        };\r\n\r\n        const token = btoa(JSON.stringify(tokenData));\r\n        \r\n        // Сохраняем в localStorage\r\n        localStorage.setItem(this.tokenKey, token);\r\n        localStorage.setItem(this.userKey, JSON.stringify(result.user));\r\n        \r\n        // Обновляем состояния\r\n        this.isAuthenticated.next(true);\r\n        this.currentUser.next(result.user);\r\n        \r\n        console.log('Успешный вход пользователя:', result.user.username);\r\n        return { success: true, user: result.user };\r\n      }\r\n\r\n      return { success: false, error: 'Неверное имя пользователя или пароль' };\r\n    } catch (error) {\r\n      console.error('Ошибка входа:', error);\r\n      return { success: false, error: 'Произошла ошибка при входе в систему' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Выход из системы\r\n   */\r\n  public logout(): void {\r\n    const username = this.currentUser.value?.username;\r\n    \r\n    localStorage.removeItem(this.tokenKey);\r\n    localStorage.removeItem(this.userKey);\r\n    this.isAuthenticated.next(false);\r\n    this.currentUser.next(null);\r\n    \r\n    console.log('Пользователь вышел из системы:', username);\r\n  }\r\n\r\n  /**\r\n   * Проверка статуса аутентификации\r\n   */\r\n  public isLoggedIn(): Observable<boolean> {\r\n    return this.isAuthenticated.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Получение текущего пользователя\r\n   */\r\n  public getCurrentUser(): Observable<IAdminUser | null> {\r\n    return this.currentUser.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Получение текущего пользователя (синхронно)\r\n   */\r\n  public getCurrentUserSync(): IAdminUser | null {\r\n    return this.currentUser.value;\r\n  }\r\n\r\n  /**\r\n   * Получение токена\r\n   */\r\n  public getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  /**\r\n   * Проверка валидности токена\r\n   */\r\n  public validateToken(): boolean {\r\n    return this.hasToken();\r\n  }\r\n\r\n  /**\r\n   * Проверка прав администратора\r\n   */\r\n  public isAdmin(): boolean {\r\n    return this.hasToken() && !!this.currentUser.value;\r\n  }\r\n\r\n  /**\r\n   * Получение имени текущего пользователя\r\n   */\r\n  public getUsername(): string | null {\r\n    return this.currentUser.value?.username || null;\r\n  }\r\n\r\n  /**\r\n   * Получение ID текущего пользователя\r\n   */\r\n  public getUserId(): number | null {\r\n    return this.currentUser.value?.id || null;\r\n  }\r\n\r\n  /**\r\n   * Обновление данных пользователя\r\n   */\r\n  public updateUserData(user: IAdminUser): void {\r\n    if (this.currentUser.value?.id === user.id) {\r\n      this.currentUser.next(user);\r\n      localStorage.setItem(this.userKey, JSON.stringify(user));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Проверка, истек ли срок действия токена\r\n   */\r\n  public isTokenExpired(): boolean {\r\n    const token = this.getToken();\r\n    if (!token) return true;\r\n\r\n    try {\r\n      const payload = JSON.parse(atob(token));\r\n      return payload.exp < Date.now();\r\n    } catch (error) {\r\n      console.error('Ошибка проверки токена:', error);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Автоматический вход при наличии валидного токена\r\n   */\r\n  public autoLogin(): boolean {\r\n    if (this.hasToken() && !this.isTokenExpired()) {\r\n      const user = this.getStoredUser();\r\n      if (user) {\r\n        this.currentUser.next(user);\r\n        this.isAuthenticated.next(true);\r\n        console.log('Автоматический вход пользователя:', user.username);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Очистка данных аутентификации\r\n   */\r\n  public clearAuthData(): void {\r\n    localStorage.removeItem(this.tokenKey);\r\n    localStorage.removeItem(this.userKey);\r\n    this.isAuthenticated.next(false);\r\n    this.currentUser.next(null);\r\n  }\r\n\r\n  /**\r\n   * Проверка наличия токена\r\n   */\r\n  private hasToken(): boolean {\r\n    const token = this.getToken();\r\n    if (!token) return false;\r\n\r\n    try {\r\n      const payload = JSON.parse(atob(token));\r\n      const isExpired = payload.exp < Date.now();\r\n      \r\n      if (isExpired) {\r\n        this.clearAuthData();\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Неверный формат токена:', error);\r\n      this.clearAuthData();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получение пользователя из localStorage\r\n   */\r\n  private getStoredUser(): IAdminUser | null {\r\n    try {\r\n      const userStr = localStorage.getItem(this.userKey);\r\n      if (!userStr) return null;\r\n\r\n      const user = JSON.parse(userStr) as IAdminUser;\r\n      return user;\r\n    } catch (error) {\r\n      console.error('Ошибка чтения пользователя из localStorage:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Создание тестового администратора (для разработки)\r\n   */\r\n  public createTestAdmin(): void {\r\n    const testAdmin = {\r\n      username: 'test',\r\n      password: 'test123'\r\n    };\r\n\r\n    try {\r\n      this.dbService.createAdminUser(testAdmin);\r\n      console.log('Тестовый администратор создан:', testAdmin.username);\r\n    } catch (error) {\r\n      console.log('Тестовый администратор уже существует');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получение информации о сессии\r\n   */\r\n  public getSessionInfo(): { \r\n    isAuthenticated: boolean; \r\n    user: IAdminUser | null; \r\n    tokenExists: boolean;\r\n    tokenValid: boolean;\r\n  } {\r\n    return {\r\n      isAuthenticated: this.isAuthenticated.value,\r\n      user: this.currentUser.value,\r\n      tokenExists: !!this.getToken(),\r\n      tokenValid: this.validateToken()\r\n    };\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}