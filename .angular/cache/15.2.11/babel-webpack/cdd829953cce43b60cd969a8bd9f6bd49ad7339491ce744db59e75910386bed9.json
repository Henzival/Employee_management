{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class JsonDatabaseService {\n  constructor() {\n    this.dbKey = 'employee_management_db';\n    this.employeesSubject = new BehaviorSubject([]);\n    this.positionsSubject = new BehaviorSubject([]);\n    this.db = this.initializeDatabase();\n    this.loadData();\n  }\n  initializeDatabase() {\n    const defaultData = {\n      positions: [{\n        id: 1,\n        name: 'Software Developer',\n        created_at: new Date().toISOString()\n      }, {\n        id: 2,\n        name: 'Project Manager',\n        created_at: new Date().toISOString()\n      }, {\n        id: 3,\n        name: 'HR Manager',\n        created_at: new Date().toISOString()\n      }, {\n        id: 4,\n        name: 'QA Engineer',\n        created_at: new Date().toISOString()\n      }, {\n        id: 5,\n        name: 'DevOps Engineer',\n        created_at: new Date().toISOString()\n      }],\n      employees: [],\n      admin_users: [{\n        id: 1,\n        username: 'admin',\n        password: 'password',\n        created_at: new Date().toISOString()\n      }]\n    };\n    const stored = localStorage.getItem(this.dbKey);\n    if (!stored) {\n      localStorage.setItem(this.dbKey, JSON.stringify(defaultData));\n      return defaultData;\n    }\n    return JSON.parse(stored);\n  }\n  saveDatabase() {\n    localStorage.setItem(this.dbKey, JSON.stringify(this.db));\n    this.loadData();\n  }\n  loadData() {\n    // Добавляем position_name для сотрудников\n    const employeesWithPositionNames = this.db.employees.map(employee => ({\n      ...employee,\n      position_name: this.db.positions.find(p => p.id === employee.position_id)?.name || ''\n    }));\n    this.employeesSubject.next([...employeesWithPositionNames]);\n    this.positionsSubject.next([...this.db.positions]);\n  }\n  getNextId(collection) {\n    const items = this.db[collection];\n    if (items.length === 0) return 1;\n    const maxId = Math.max(...items.map(item => item.id || 0));\n    return maxId + 1;\n  }\n  // Employee methods\n  getEmployees() {\n    return this.employeesSubject.asObservable();\n  }\n  getEmployeesSync() {\n    return this.db.employees.map(employee => ({\n      ...employee,\n      position_name: this.db.positions.find(p => p.id === employee.position_id)?.name || ''\n    }));\n  }\n  getEmployeeById(id) {\n    const employee = this.db.employees.find(e => e.id === id);\n    if (!employee) return null;\n    return {\n      ...employee,\n      position_name: this.db.positions.find(p => p.id === employee.position_id)?.name || ''\n    };\n  }\n  createEmployee(employeeData) {\n    // Проверяем, существует ли employee_id\n    const existingEmployee = this.db.employees.find(e => e.employee_id === employeeData.employee_id);\n    if (existingEmployee) {\n      throw new Error('Employee ID already exists');\n    }\n    const newEmployee = {\n      ...employeeData,\n      id: this.getNextId('employees'),\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    this.db.employees.push(newEmployee);\n    this.saveDatabase();\n    return this.getEmployeeById(newEmployee.id);\n  }\n  updateEmployee(id, employeeData) {\n    const index = this.db.employees.findIndex(e => e.id === id);\n    if (index === -1) return null;\n    // Проверяем, существует ли employee_id у другого сотрудника\n    const duplicateEmployee = this.db.employees.find(e => e.employee_id === employeeData.employee_id && e.id !== id);\n    if (duplicateEmployee) {\n      throw new Error('Employee ID already exists');\n    }\n    const existingEmployee = this.db.employees[index];\n    const updatedEmployee = {\n      ...employeeData,\n      id: existingEmployee.id,\n      created_at: existingEmployee.created_at,\n      updated_at: new Date().toISOString()\n    };\n    this.db.employees[index] = updatedEmployee;\n    this.saveDatabase();\n    return this.getEmployeeById(id);\n  }\n  deleteEmployee(id) {\n    const index = this.db.employees.findIndex(e => e.id === id);\n    if (index === -1) return false;\n    this.db.employees.splice(index, 1);\n    this.saveDatabase();\n    return true;\n  }\n  // Position methods\n  getPositions() {\n    return this.positionsSubject.asObservable();\n  }\n  getPositionsSync() {\n    return [...this.db.positions];\n  }\n  createPosition(positionData) {\n    // Проверяем, существует ли должность\n    const existingPosition = this.db.positions.find(p => p.name.toLowerCase() === positionData.name.toLowerCase());\n    if (existingPosition) {\n      throw new Error('Position already exists');\n    }\n    const newPosition = {\n      ...positionData,\n      id: this.getNextId('positions'),\n      created_at: new Date().toISOString()\n    };\n    this.db.positions.push(newPosition);\n    this.saveDatabase();\n    return newPosition;\n  }\n  deletePosition(id) {\n    // Проверяем, используется ли должность сотрудниками\n    const employeesUsingPosition = this.db.employees.filter(e => e.position_id === id);\n    if (employeesUsingPosition.length > 0) {\n      throw new Error('Cannot delete position that is assigned to employees');\n    }\n    const index = this.db.positions.findIndex(p => p.id === id);\n    if (index === -1) return false;\n    this.db.positions.splice(index, 1);\n    this.saveDatabase();\n    return true;\n  }\n  // Admin methods\n  validateAdmin(username, password) {\n    const user = this.db.admin_users.find(u => u.username === username);\n    if (!user || user.password !== password) {\n      return {\n        success: false\n      };\n    }\n    const {\n      password: _,\n      ...userWithoutPassword\n    } = user;\n    return {\n      success: true,\n      user: userWithoutPassword\n    };\n  }\n  getAdminUsers() {\n    return this.db.admin_users.map(({\n      password,\n      ...user\n    }) => user);\n  }\n  createAdminUser(userData) {\n    const existingUser = this.db.admin_users.find(u => u.username === userData.username);\n    if (existingUser) {\n      throw new Error('Username already exists');\n    }\n    const newAdmin = {\n      id: this.getNextId('admin_users'),\n      username: userData.username,\n      password: userData.password,\n      created_at: new Date().toISOString()\n    };\n    this.db.admin_users.push(newAdmin);\n    this.saveDatabase();\n    const {\n      password,\n      ...userWithoutPassword\n    } = newAdmin;\n    return userWithoutPassword;\n  }\n  deleteAdminUser(id, currentUserId) {\n    if (id === currentUserId) {\n      throw new Error('Cannot delete your own account');\n    }\n    if (id === 1) {\n      throw new Error('Cannot delete the primary admin account');\n    }\n    const index = this.db.admin_users.findIndex(u => u.id === id);\n    if (index === -1) return false;\n    this.db.admin_users.splice(index, 1);\n    this.saveDatabase();\n    return true;\n  }\n  // Вспомогательные методы для отладки\n  clearDatabase() {\n    localStorage.removeItem(this.dbKey);\n    this.db = this.initializeDatabase();\n    this.loadData();\n  }\n  exportDatabase() {\n    return JSON.stringify(this.db, null, 2);\n  }\n  importDatabase(jsonData) {\n    try {\n      const importedData = JSON.parse(jsonData);\n      this.db = importedData;\n      this.saveDatabase();\n    } catch (error) {\n      throw new Error('Invalid JSON data');\n    }\n  }\n  static {\n    this.ɵfac = function JsonDatabaseService_Factory(t) {\n      return new (t || JsonDatabaseService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JsonDatabaseService,\n      factory: JsonDatabaseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","JsonDatabaseService","constructor","dbKey","employeesSubject","positionsSubject","db","initializeDatabase","loadData","defaultData","positions","id","name","created_at","Date","toISOString","employees","admin_users","username","password","stored","localStorage","getItem","setItem","JSON","stringify","parse","saveDatabase","employeesWithPositionNames","map","employee","position_name","find","p","position_id","next","getNextId","collection","items","length","maxId","Math","max","item","getEmployees","asObservable","getEmployeesSync","getEmployeeById","e","createEmployee","employeeData","existingEmployee","employee_id","Error","newEmployee","updated_at","push","updateEmployee","index","findIndex","duplicateEmployee","updatedEmployee","deleteEmployee","splice","getPositions","getPositionsSync","createPosition","positionData","existingPosition","toLowerCase","newPosition","deletePosition","employeesUsingPosition","filter","validateAdmin","user","u","success","_","userWithoutPassword","getAdminUsers","createAdminUser","userData","existingUser","newAdmin","deleteAdminUser","currentUserId","clearDatabase","removeItem","exportDatabase","importDatabase","jsonData","importedData","error","factory","ɵfac","providedIn"],"sources":["D:\\employee-management\\src\\app\\shared\\services\\json-database.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { IEmployee, IPosition, IAdminUser } from '../interfaces/employee.interface';\r\n\r\ninterface Database {\r\n  positions: IPosition[];\r\n  employees: IEmployee[];\r\n  admin_users: IAdminUser[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JsonDatabaseService {\r\n  private dbKey = 'employee_management_db';\r\n  private db: Database;\r\n  private employeesSubject = new BehaviorSubject<IEmployee[]>([]);\r\n  private positionsSubject = new BehaviorSubject<IPosition[]>([]);\r\n\r\n  constructor() {\r\n    this.db = this.initializeDatabase();\r\n    this.loadData();\r\n  }\r\n\r\n  private initializeDatabase(): Database {\r\n    const defaultData: Database = {\r\n      positions: [\r\n        { id: 1, name: 'Software Developer', created_at: new Date().toISOString() },\r\n        { id: 2, name: 'Project Manager', created_at: new Date().toISOString() },\r\n        { id: 3, name: 'HR Manager', created_at: new Date().toISOString() },\r\n        { id: 4, name: 'QA Engineer', created_at: new Date().toISOString() },\r\n        { id: 5, name: 'DevOps Engineer', created_at: new Date().toISOString() }\r\n      ],\r\n      employees: [],\r\n      admin_users: [\r\n        { \r\n          id: 1, \r\n          username: 'admin', \r\n          password: 'password', // Пароль в открытом виде для демо\r\n          created_at: new Date().toISOString()\r\n        }\r\n      ]\r\n    };\r\n\r\n    const stored = localStorage.getItem(this.dbKey);\r\n    if (!stored) {\r\n      localStorage.setItem(this.dbKey, JSON.stringify(defaultData));\r\n      return defaultData;\r\n    }\r\n\r\n    return JSON.parse(stored);\r\n  }\r\n\r\n  private saveDatabase(): void {\r\n    localStorage.setItem(this.dbKey, JSON.stringify(this.db));\r\n    this.loadData();\r\n  }\r\n\r\n  private loadData(): void {\r\n    // Добавляем position_name для сотрудников\r\n    const employeesWithPositionNames = this.db.employees.map(employee => ({\r\n      ...employee,\r\n      position_name: this.db.positions.find(p => p.id === employee.position_id)?.name || ''\r\n    }));\r\n    \r\n    this.employeesSubject.next([...employeesWithPositionNames]);\r\n    this.positionsSubject.next([...this.db.positions]);\r\n  }\r\n\r\n  private getNextId(collection: keyof Database): number {\r\n    const items = this.db[collection];\r\n    if (items.length === 0) return 1;\r\n    \r\n    const maxId = Math.max(...items.map(item => item.id || 0));\r\n    return maxId + 1;\r\n  }\r\n\r\n  // Employee methods\r\n  getEmployees(): Observable<IEmployee[]> {\r\n    return this.employeesSubject.asObservable();\r\n  }\r\n\r\n  getEmployeesSync(): IEmployee[] {\r\n    return this.db.employees.map(employee => ({\r\n      ...employee,\r\n      position_name: this.db.positions.find(p => p.id === employee.position_id)?.name || ''\r\n    }));\r\n  }\r\n\r\n  getEmployeeById(id: number): IEmployee | null {\r\n    const employee = this.db.employees.find(e => e.id === id);\r\n    if (!employee) return null;\r\n\r\n    return {\r\n      ...employee,\r\n      position_name: this.db.positions.find(p => p.id === employee.position_id)?.name || ''\r\n    };\r\n  }\r\n\r\n  createEmployee(employeeData: Omit<IEmployee, 'id' | 'created_at' | 'updated_at' | 'position_name'>): IEmployee {\r\n    // Проверяем, существует ли employee_id\r\n    const existingEmployee = this.db.employees.find(e => e.employee_id === employeeData.employee_id);\r\n    if (existingEmployee) {\r\n      throw new Error('Employee ID already exists');\r\n    }\r\n\r\n    const newEmployee: IEmployee = {\r\n      ...employeeData,\r\n      id: this.getNextId('employees'),\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n\r\n    this.db.employees.push(newEmployee);\r\n    this.saveDatabase();\r\n    return this.getEmployeeById(newEmployee.id!)!;\r\n  }\r\n\r\n  updateEmployee(id: number, employeeData: Omit<IEmployee, 'id' | 'created_at' | 'updated_at' | 'position_name'>): IEmployee | null {\r\n    const index = this.db.employees.findIndex(e => e.id === id);\r\n    if (index === -1) return null;\r\n\r\n    // Проверяем, существует ли employee_id у другого сотрудника\r\n    const duplicateEmployee = this.db.employees.find(\r\n      e => e.employee_id === employeeData.employee_id && e.id !== id\r\n    );\r\n    if (duplicateEmployee) {\r\n      throw new Error('Employee ID already exists');\r\n    }\r\n\r\n    const existingEmployee = this.db.employees[index];\r\n    const updatedEmployee: IEmployee = {\r\n      ...employeeData,\r\n      id: existingEmployee.id,\r\n      created_at: existingEmployee.created_at,\r\n      updated_at: new Date().toISOString()\r\n    };\r\n\r\n    this.db.employees[index] = updatedEmployee;\r\n    this.saveDatabase();\r\n    return this.getEmployeeById(id)!;\r\n  }\r\n\r\n  deleteEmployee(id: number): boolean {\r\n    const index = this.db.employees.findIndex(e => e.id === id);\r\n    if (index === -1) return false;\r\n\r\n    this.db.employees.splice(index, 1);\r\n    this.saveDatabase();\r\n    return true;\r\n  }\r\n\r\n  // Position methods\r\n  getPositions(): Observable<IPosition[]> {\r\n    return this.positionsSubject.asObservable();\r\n  }\r\n\r\n  getPositionsSync(): IPosition[] {\r\n    return [...this.db.positions];\r\n  }\r\n\r\n  createPosition(positionData: Omit<IPosition, 'id' | 'created_at'>): IPosition {\r\n    // Проверяем, существует ли должность\r\n    const existingPosition = this.db.positions.find(\r\n      p => p.name.toLowerCase() === positionData.name.toLowerCase()\r\n    );\r\n    if (existingPosition) {\r\n      throw new Error('Position already exists');\r\n    }\r\n\r\n    const newPosition: IPosition = {\r\n      ...positionData,\r\n      id: this.getNextId('positions'),\r\n      created_at: new Date().toISOString()\r\n    };\r\n\r\n    this.db.positions.push(newPosition);\r\n    this.saveDatabase();\r\n    return newPosition;\r\n  }\r\n\r\n  deletePosition(id: number): boolean {\r\n    // Проверяем, используется ли должность сотрудниками\r\n    const employeesUsingPosition = this.db.employees.filter(e => e.position_id === id);\r\n    if (employeesUsingPosition.length > 0) {\r\n      throw new Error('Cannot delete position that is assigned to employees');\r\n    }\r\n\r\n    const index = this.db.positions.findIndex(p => p.id === id);\r\n    if (index === -1) return false;\r\n\r\n    this.db.positions.splice(index, 1);\r\n    this.saveDatabase();\r\n    return true;\r\n  }\r\n\r\n  // Admin methods\r\n  validateAdmin(username: string, password: string): { success: boolean; user?: Omit<IAdminUser, 'password'> } {\r\n    const user = this.db.admin_users.find(u => u.username === username);\r\n    \r\n    if (!user || user.password !== password) {\r\n      return { success: false };\r\n    }\r\n\r\n    const { password: _, ...userWithoutPassword } = user;\r\n    return { success: true, user: userWithoutPassword };\r\n  }\r\n\r\n  getAdminUsers(): Omit<IAdminUser, 'password'>[] {\r\n    return this.db.admin_users.map(({ password, ...user }) => user);\r\n  }\r\n\r\n  createAdminUser(userData: { username: string; password: string }): Omit<IAdminUser, 'password'> {\r\n    const existingUser = this.db.admin_users.find(u => u.username === userData.username);\r\n    if (existingUser) {\r\n      throw new Error('Username already exists');\r\n    }\r\n\r\n    const newAdmin: IAdminUser = {\r\n      id: this.getNextId('admin_users'),\r\n      username: userData.username,\r\n      password: userData.password,\r\n      created_at: new Date().toISOString()\r\n    };\r\n\r\n    this.db.admin_users.push(newAdmin);\r\n    this.saveDatabase();\r\n\r\n    const { password, ...userWithoutPassword } = newAdmin;\r\n    return userWithoutPassword;\r\n  }\r\n\r\n  deleteAdminUser(id: number, currentUserId?: number): boolean {\r\n    if (id === currentUserId) {\r\n      throw new Error('Cannot delete your own account');\r\n    }\r\n\r\n    if (id === 1) {\r\n      throw new Error('Cannot delete the primary admin account');\r\n    }\r\n\r\n    const index = this.db.admin_users.findIndex(u => u.id === id);\r\n    if (index === -1) return false;\r\n\r\n    this.db.admin_users.splice(index, 1);\r\n    this.saveDatabase();\r\n    return true;\r\n  }\r\n\r\n  // Вспомогательные методы для отладки\r\n  clearDatabase(): void {\r\n    localStorage.removeItem(this.dbKey);\r\n    this.db = this.initializeDatabase();\r\n    this.loadData();\r\n  }\r\n\r\n  exportDatabase(): string {\r\n    return JSON.stringify(this.db, null, 2);\r\n  }\r\n\r\n  importDatabase(jsonData: string): void {\r\n    try {\r\n      const importedData = JSON.parse(jsonData) as Database;\r\n      this.db = importedData;\r\n      this.saveDatabase();\r\n    } catch (error) {\r\n      throw new Error('Invalid JSON data');\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}