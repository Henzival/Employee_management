{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./json-database.service\";\nimport * as i2 from \"./auth.service\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(dbService, authService) {\n      this.dbService = dbService;\n      this.authService = authService;\n    }\n    checkAuthentication() {\n      if (!this.authService.validateToken()) {\n        throw new Error('Неавторизованный доступ. Пожалуйста, войдите снова.');\n      }\n    }\n    handleError(error) {\n      console.error('Employee Service Error:', error);\n      const errorMessage = error.message || 'Что-то пошло не так. Пожалуйста, попробуйте снова.';\n      return throwError(() => new Error(errorMessage));\n    }\n    /**\r\n     * Получить список всех сотрудников\r\n     */\n    getEmployees() {\n      return this.dbService.getEmployees().pipe(catchError(this.handleError));\n    }\n    /**\r\n     * Получить сотрудника по ID\r\n     */\n    getEmployeeById(id) {\n      if (!id || id <= 0) {\n        return throwError(() => new Error('Неверный идентификатор сотрудника'));\n      }\n      const employee = this.dbService.getEmployeeById(id);\n      if (!employee) {\n        return throwError(() => new Error('Сотрудник не найден'));\n      }\n      return of(employee).pipe(catchError(this.handleError));\n    }\n    /**\r\n     * Создать нового сотрудника\r\n     */\n    createEmployee(employeeData) {\n      try {\n        this.checkAuthentication();\n        console.log('Creating employee:', employeeData);\n        // Валидация обязательных полей\n        if (!employeeData.employee_id || !employeeData.first_name || !employeeData.last_name) {\n          return throwError(() => new Error('ID сотрудника, имя и фамилия обязательны для заполнения'));\n        }\n        if (typeof employeeData.employee_id !== 'string' || employeeData.employee_id.trim() === '') {\n          return throwError(() => new Error('ID сотрудника должен быть непустой строкой'));\n        }\n        if (typeof employeeData.first_name !== 'string' || employeeData.first_name.trim() === '') {\n          return throwError(() => new Error('Имя должно быть непустой строкой'));\n        }\n        if (typeof employeeData.last_name !== 'string' || employeeData.last_name.trim() === '') {\n          return throwError(() => new Error('Фамилия должна быть непустой строкой'));\n        }\n        // Валидация email\n        if (employeeData.contact_email && !this.isValidEmail(employeeData.contact_email)) {\n          return throwError(() => new Error('Неверный формат email'));\n        }\n        // Валидация зарплаты\n        if (employeeData.salary && employeeData.salary < 0) {\n          return throwError(() => new Error('Зарплата не может быть отрицательной'));\n        }\n        const newEmployee = this.dbService.createEmployee(employeeData);\n        return of(newEmployee).pipe(catchError(this.handleError));\n      } catch (error) {\n        return this.handleError(error);\n      }\n    }\n    /**\r\n     * Обновить данные сотрудника\r\n     */\n    updateEmployee(id, employeeData) {\n      try {\n        this.checkAuthentication();\n        console.log('Updating employee:', {\n          id,\n          employeeData\n        });\n        if (!id || id <= 0) {\n          return throwError(() => new Error('Неверный идентификатор сотрудника'));\n        }\n        // Валидация обязательных полей\n        if (!employeeData.employee_id || !employeeData.first_name || !employeeData.last_name) {\n          return throwError(() => new Error('ID сотрудника, имя и фамилия обязательны для заполнения'));\n        }\n        if (typeof employeeData.employee_id !== 'string' || employeeData.employee_id.trim() === '') {\n          return throwError(() => new Error('ID сотрудника должен быть непустой строкой'));\n        }\n        // Валидация email\n        if (employeeData.contact_email && !this.isValidEmail(employeeData.contact_email)) {\n          return throwError(() => new Error('Неверный формат email'));\n        }\n        // Валидация зарплаты\n        if (employeeData.salary && employeeData.salary < 0) {\n          return throwError(() => new Error('Зарплата не может быть отрицательной'));\n        }\n        const updatedEmployee = this.dbService.updateEmployee(id, employeeData);\n        if (!updatedEmployee) {\n          return throwError(() => new Error('Сотрудник не найден'));\n        }\n        return of(updatedEmployee).pipe(catchError(this.handleError));\n      } catch (error) {\n        return this.handleError(error);\n      }\n    }\n    /**\r\n     * Удалить сотрудника\r\n     */\n    deleteEmployee(id) {\n      try {\n        this.checkAuthentication();\n        if (!id || id <= 0) {\n          return throwError(() => new Error('Неверный идентификатор сотрудника'));\n        }\n        const success = this.dbService.deleteEmployee(id);\n        if (!success) {\n          return throwError(() => new Error('Сотрудник не найден'));\n        }\n        return of(void 0).pipe(catchError(this.handleError));\n      } catch (error) {\n        return this.handleError(error);\n      }\n    }\n    /**\r\n     * Получить список всех должностей\r\n     */\n    getPositions() {\n      return this.dbService.getPositions().pipe(catchError(this.handleError));\n    }\n    /**\r\n     * Создать новую должность\r\n     */\n    createPosition(positionData) {\n      try {\n        this.checkAuthentication();\n        if (!positionData.name || typeof positionData.name !== 'string' || positionData.name.trim() === '') {\n          return throwError(() => new Error('Название должности обязательно для заполнения'));\n        }\n        if (positionData.name.trim().length < 2) {\n          return throwError(() => new Error('Название должности должно содержать минимум 2 символа'));\n        }\n        const newPosition = this.dbService.createPosition(positionData);\n        return of(newPosition).pipe(catchError(this.handleError));\n      } catch (error) {\n        return this.handleError(error);\n      }\n    }\n    /**\r\n     * Удалить должность\r\n     */\n    deletePosition(id) {\n      try {\n        this.checkAuthentication();\n        if (!id || id <= 0) {\n          return throwError(() => new Error('Неверный идентификатор должности'));\n        }\n        const success = this.dbService.deletePosition(id);\n        if (!success) {\n          return throwError(() => new Error('Должность не найдена'));\n        }\n        return of(void 0).pipe(catchError(this.handleError));\n      } catch (error) {\n        return this.handleError(error);\n      }\n    }\n    /**\r\n     * Поиск сотрудников по имени или фамилии\r\n     */\n    searchEmployees(query) {\n      if (!query || query.trim() === '') {\n        return this.getEmployees();\n      }\n      const searchTerm = query.toLowerCase().trim();\n      return this.getEmployees().pipe(map(employees => employees.filter(employee => employee.first_name.toLowerCase().includes(searchTerm) || employee.last_name.toLowerCase().includes(searchTerm) || employee.employee_id.toLowerCase().includes(searchTerm) || employee.middle_name && employee.middle_name.toLowerCase().includes(searchTerm))), catchError(this.handleError));\n    }\n    /**\r\n     * Получить сотрудников по должности\r\n     */\n    getEmployeesByPosition(positionId) {\n      if (!positionId || positionId <= 0) {\n        return throwError(() => new Error('Неверный идентификатор должности'));\n      }\n      return this.getEmployees().pipe(map(employees => employees.filter(employee => employee.position_id === positionId)), catchError(this.handleError));\n    }\n    /**\r\n     * Получить статистику по сотрудникам\r\n     */\n    getEmployeeStats() {\n      return this.getEmployees().pipe(map(employees => {\n        const total = employees.length;\n        const byPosition = {};\n        employees.forEach(employee => {\n          const positionName = employee.position_name || 'Не указана';\n          byPosition[positionName] = (byPosition[positionName] || 0) + 1;\n        });\n        const salaries = employees.filter(emp => emp.salary && emp.salary > 0).map(emp => emp.salary);\n        const averageSalary = salaries.length > 0 ? salaries.reduce((sum, salary) => sum + salary, 0) / salaries.length : 0;\n        return {\n          total,\n          byPosition,\n          averageSalary: Math.round(averageSalary * 100) / 100\n        };\n      }), catchError(this.handleError));\n    }\n    /**\r\n     * Проверить, существует ли employee_id\r\n     */\n    checkEmployeeIdExists(employeeId, excludeId) {\n      try {\n        const employees = this.dbService.getEmployeesSync();\n        return employees.some(employee => employee.employee_id === employeeId && employee.id !== excludeId);\n      } catch (error) {\n        console.error('Error checking employee ID:', error);\n        return false;\n      }\n    }\n    /**\r\n     * Валидация email\r\n     */\n    isValidEmail(email) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      return emailRegex.test(email);\n    }\n    /**\r\n     * Получить сотрудников с высокой зарплатой\r\n     */\n    getHighSalaryEmployees(threshold = 50000) {\n      return this.getEmployees().pipe(map(employees => employees.filter(employee => employee.salary && employee.salary >= threshold).sort((a, b) => (b.salary || 0) - (a.salary || 0))), catchError(this.handleError));\n    }\n    /**\r\n     * Экспорт данных сотрудников в CSV формат\r\n     */\n    exportToCsv() {\n      return this.getEmployees().pipe(map(employees => {\n        if (employees.length === 0) {\n          throw new Error('Нет данных для экспорта');\n        }\n        const headers = ['ID', 'Employee ID', 'First Name', 'Last Name', 'Position', 'Email', 'Phone', 'Salary'];\n        const csvRows = [headers.join(',')];\n        employees.forEach(employee => {\n          const row = [employee.id, `\"${employee.employee_id}\"`, `\"${employee.first_name}\"`, `\"${employee.last_name}\"`, `\"${employee.position_name || ''}\"`, `\"${employee.contact_email || ''}\"`, `\"${employee.contact_phone || ''}\"`, employee.salary || 0];\n          csvRows.push(row.join(','));\n        });\n        return csvRows.join('\\n');\n      }), catchError(this.handleError));\n    }\n    static {\n      this.ɵfac = function EmployeeService_Factory(t) {\n        return new (t || EmployeeService)(i0.ɵɵinject(i1.JsonDatabaseService), i0.ɵɵinject(i2.AuthService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: EmployeeService,\n        factory: EmployeeService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}