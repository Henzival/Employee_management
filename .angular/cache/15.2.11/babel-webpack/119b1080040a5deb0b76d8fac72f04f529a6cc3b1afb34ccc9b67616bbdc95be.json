{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  var _AuthService;\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:3000/api';\n      this.isAuthenticated = new BehaviorSubject(this.hasToken());\n    }\n    login(username, password) {\n      return this.http.post(`${this.apiUrl}/auth/login`, {\n        username,\n        password\n      }).pipe(tap(response => {\n        if (response.token) {\n          localStorage.setItem('auth_token', response.token);\n          this.isAuthenticated.next(true);\n        }\n      }));\n    }\n    logout() {\n      localStorage.removeItem('auth_token');\n      this.isAuthenticated.next(false);\n    }\n    isLoggedIn() {\n      return this.isAuthenticated.asObservable();\n    }\n    getToken() {\n      const token = localStorage.getItem('auth_token');\n      return token;\n    }\n    hasToken() {\n      const hasToken = !!localStorage.getItem('auth_token');\n      return hasToken;\n    }\n    // Проверка валидности токена\n    validateToken() {\n      const token = this.getToken();\n      if (!token) return false;\n      try {\n        // Простая проверка JWT токена (без верификации подписи)\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        const isExpired = payload.exp * 1000 < Date.now();\n        if (isExpired) {\n          this.logout();\n          return false;\n        }\n        return true;\n      } catch (error) {\n        console.error('Invalid token format');\n        this.logout();\n        return false;\n      }\n    }\n  }\n  _AuthService = AuthService;\n  _AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || _AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  _AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _AuthService,\n    factory: _AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}