{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TranslationService = /*#__PURE__*/(() => {\n  class TranslationService {\n    constructor(http) {\n      this.http = http;\n      this.currentLang = new BehaviorSubject('ru');\n      this.translations = {\n        ru: {},\n        en: {}\n      };\n      this.translationsLoaded = new BehaviorSubject(false);\n      this.loadTranslations('ru');\n      this.loadTranslations('en');\n    }\n    loadTranslations(lang) {\n      this.http.get(`${lang}.json`).pipe(catchError(error => {\n        console.error(`Error loading ${lang} translations:`, error);\n        return [{}];\n      })).subscribe(translations => {\n        this.translations[lang] = translations;\n        if (this.translations['ru'] && Object.keys(this.translations['ru']).length > 0 && this.translations['en'] && Object.keys(this.translations['en']).length > 0) {\n          this.translationsLoaded.next(true);\n        }\n      });\n    }\n    translate(key) {\n      const translation = this.translations[this.currentLang.value]?.[key];\n      return translation || key;\n    }\n    setLanguage(lang) {\n      if (this.translations[lang] && Object.keys(this.translations[lang]).length > 0) {\n        this.currentLang.next(lang);\n      } else {\n        console.warn(`Translations for language ${lang} are not loaded yet`);\n      }\n    }\n    getCurrentLang() {\n      return this.currentLang.value;\n    }\n    getLanguageObservable() {\n      return this.currentLang.asObservable();\n    }\n    getTranslationsLoadedObservable() {\n      return this.translationsLoaded.asObservable();\n    }\n    reloadTranslations(lang) {\n      return this.http.get(`/assets/i18n/${lang}.json`).pipe(tap(translations => {\n        this.translations[lang] = translations;\n      }), map(() => true), catchError(error => {\n        console.error(`Error reloading ${lang} translations:`, error);\n        return [false];\n      }));\n    }\n    static {\n      this.ɵfac = function TranslationService_Factory(t) {\n        return new (t || TranslationService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: TranslationService,\n        factory: TranslationService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return TranslationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}