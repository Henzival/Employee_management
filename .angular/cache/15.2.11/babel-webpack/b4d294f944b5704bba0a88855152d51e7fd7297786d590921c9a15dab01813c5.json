{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.apiUrl = 'http://localhost:3000/api';\n    }\n    getHeaders() {\n      const token = this.authService.getToken();\n      return new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      });\n    }\n    handleError(error) {\n      console.error('API Error:', error);\n      if (error.status === 401) {\n        return throwError(() => new Error('Неавторизованный доступ. Пожалуйста, войдите снова.'));\n      } else if (error.status === 400) {\n        return throwError(() => new Error(error.error?.error || 'Неверный запрос'));\n      } else if (error.status === 500) {\n        return throwError(() => new Error('Ошибка сервера. Попробуйте позже.'));\n      } else {\n        return throwError(() => new Error('Что-то пошло не так. Пожалуйста, попробуйте снова.'));\n      }\n    }\n    getEmployees() {\n      return this.http.get(`${this.apiUrl}/employees`).pipe(catchError(this.handleError));\n    }\n    getEmployeeById(id) {\n      return this.http.get(`${this.apiUrl}/employees/${id}`).pipe(catchError(this.handleError));\n    }\n    createEmployee(employee) {\n      console.log('Creating employee:', employee);\n      return this.http.post(`${this.apiUrl}/employees`, employee, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    updateEmployee(id, employee) {\n      console.log('Updating employee:', {\n        id,\n        employee\n      });\n      return this.http.put(`${this.apiUrl}/employees/${id}`, employee, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    deleteEmployee(id) {\n      return this.http.delete(`${this.apiUrl}/employees/${id}`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    getPositions() {\n      return this.http.get(`${this.apiUrl}/positions`).pipe(catchError(this.handleError));\n    }\n    createPosition(position) {\n      return this.http.post(`${this.apiUrl}/positions`, position, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    deletePosition(id) {\n      return this.http.delete(`${this.apiUrl}/positions/${id}`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    static {\n      this.ɵfac = function EmployeeService_Factory(t) {\n        return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: EmployeeService,\n        factory: EmployeeService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}