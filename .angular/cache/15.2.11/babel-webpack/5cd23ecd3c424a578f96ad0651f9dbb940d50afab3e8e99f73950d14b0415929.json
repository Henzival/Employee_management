{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./json-database.service\";\nimport * as i2 from \"./auth.service\";\nexport class EmployeeService {\n  constructor(dbService, authService) {\n    this.dbService = dbService;\n    this.authService = authService;\n  }\n  checkAuthentication() {\n    if (!this.authService.validateToken()) {\n      throw new Error('Неавторизованный доступ. Пожалуйста, войдите снова.');\n    }\n  }\n  handleError(error) {\n    console.error('Employee Service Error:', error);\n    const errorMessage = error.message || 'Что-то пошло не так. Пожалуйста, попробуйте снова.';\n    return throwError(() => new Error(errorMessage));\n  }\n  /**\r\n   * Получить список всех сотрудников\r\n   */\n  getEmployees() {\n    return this.dbService.getEmployees().pipe(catchError(this.handleError));\n  }\n  /**\r\n   * Получить сотрудника по ID\r\n   */\n  getEmployeeById(id) {\n    if (!id || id <= 0) {\n      return throwError(() => new Error('Неверный идентификатор сотрудника'));\n    }\n    const employee = this.dbService.getEmployeeById(id);\n    if (!employee) {\n      return throwError(() => new Error('Сотрудник не найден'));\n    }\n    return of(employee).pipe(catchError(this.handleError));\n  }\n  /**\r\n   * Создать нового сотрудника\r\n   */\n  createEmployee(employeeData) {\n    try {\n      this.checkAuthentication();\n      console.log('Creating employee:', employeeData);\n      // Валидация обязательных полей\n      if (!employeeData.employee_id || !employeeData.first_name || !employeeData.last_name) {\n        return throwError(() => new Error('ID сотрудника, имя и фамилия обязательны для заполнения'));\n      }\n      if (typeof employeeData.employee_id !== 'string' || employeeData.employee_id.trim() === '') {\n        return throwError(() => new Error('ID сотрудника должен быть непустой строкой'));\n      }\n      if (typeof employeeData.first_name !== 'string' || employeeData.first_name.trim() === '') {\n        return throwError(() => new Error('Имя должно быть непустой строкой'));\n      }\n      if (typeof employeeData.last_name !== 'string' || employeeData.last_name.trim() === '') {\n        return throwError(() => new Error('Фамилия должна быть непустой строкой'));\n      }\n      // Валидация email\n      if (employeeData.contact_email && !this.isValidEmail(employeeData.contact_email)) {\n        return throwError(() => new Error('Неверный формат email'));\n      }\n      // Валидация зарплаты\n      if (employeeData.salary && employeeData.salary < 0) {\n        return throwError(() => new Error('Зарплата не может быть отрицательной'));\n      }\n      const newEmployee = this.dbService.createEmployee(employeeData);\n      return of(newEmployee).pipe(catchError(this.handleError));\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n  /**\r\n   * Обновить данные сотрудника\r\n   */\n  updateEmployee(id, employeeData) {\n    try {\n      this.checkAuthentication();\n      console.log('Updating employee:', {\n        id,\n        employeeData\n      });\n      if (!id || id <= 0) {\n        return throwError(() => new Error('Неверный идентификатор сотрудника'));\n      }\n      // Валидация обязательных полей\n      if (!employeeData.employee_id || !employeeData.first_name || !employeeData.last_name) {\n        return throwError(() => new Error('ID сотрудника, имя и фамилия обязательны для заполнения'));\n      }\n      if (typeof employeeData.employee_id !== 'string' || employeeData.employee_id.trim() === '') {\n        return throwError(() => new Error('ID сотрудника должен быть непустой строкой'));\n      }\n      // Валидация email\n      if (employeeData.contact_email && !this.isValidEmail(employeeData.contact_email)) {\n        return throwError(() => new Error('Неверный формат email'));\n      }\n      // Валидация зарплаты\n      if (employeeData.salary && employeeData.salary < 0) {\n        return throwError(() => new Error('Зарплата не может быть отрицательной'));\n      }\n      const updatedEmployee = this.dbService.updateEmployee(id, employeeData);\n      if (!updatedEmployee) {\n        return throwError(() => new Error('Сотрудник не найден'));\n      }\n      return of(updatedEmployee).pipe(catchError(this.handleError));\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n  /**\r\n   * Удалить сотрудника\r\n   */\n  deleteEmployee(id) {\n    try {\n      this.checkAuthentication();\n      if (!id || id <= 0) {\n        return throwError(() => new Error('Неверный идентификатор сотрудника'));\n      }\n      const success = this.dbService.deleteEmployee(id);\n      if (!success) {\n        return throwError(() => new Error('Сотрудник не найден'));\n      }\n      return of(void 0).pipe(catchError(this.handleError));\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n  /**\r\n   * Получить список всех должностей\r\n   */\n  getPositions() {\n    return this.dbService.getPositions().pipe(catchError(this.handleError));\n  }\n  /**\r\n   * Создать новую должность\r\n   */\n  createPosition(positionData) {\n    try {\n      this.checkAuthentication();\n      if (!positionData.name || typeof positionData.name !== 'string' || positionData.name.trim() === '') {\n        return throwError(() => new Error('Название должности обязательно для заполнения'));\n      }\n      if (positionData.name.trim().length < 2) {\n        return throwError(() => new Error('Название должности должно содержать минимум 2 символа'));\n      }\n      const newPosition = this.dbService.createPosition(positionData);\n      return of(newPosition).pipe(catchError(this.handleError));\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n  /**\r\n   * Удалить должность\r\n   */\n  deletePosition(id) {\n    try {\n      this.checkAuthentication();\n      if (!id || id <= 0) {\n        return throwError(() => new Error('Неверный идентификатор должности'));\n      }\n      const success = this.dbService.deletePosition(id);\n      if (!success) {\n        return throwError(() => new Error('Должность не найдена'));\n      }\n      return of(void 0).pipe(catchError(this.handleError));\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n  /**\r\n   * Поиск сотрудников по имени или фамилии\r\n   */\n  searchEmployees(query) {\n    if (!query || query.trim() === '') {\n      return this.getEmployees();\n    }\n    const searchTerm = query.toLowerCase().trim();\n    return this.getEmployees().pipe(map(employees => employees.filter(employee => employee.first_name.toLowerCase().includes(searchTerm) || employee.last_name.toLowerCase().includes(searchTerm) || employee.employee_id.toLowerCase().includes(searchTerm) || employee.middle_name && employee.middle_name.toLowerCase().includes(searchTerm))), catchError(this.handleError));\n  }\n  /**\r\n   * Получить сотрудников по должности\r\n   */\n  getEmployeesByPosition(positionId) {\n    if (!positionId || positionId <= 0) {\n      return throwError(() => new Error('Неверный идентификатор должности'));\n    }\n    return this.getEmployees().pipe(map(employees => employees.filter(employee => employee.position_id === positionId)), catchError(this.handleError));\n  }\n  /**\r\n   * Получить статистику по сотрудникам\r\n   */\n  getEmployeeStats() {\n    return this.getEmployees().pipe(map(employees => {\n      const total = employees.length;\n      const byPosition = {};\n      employees.forEach(employee => {\n        const positionName = employee.position_name || 'Не указана';\n        byPosition[positionName] = (byPosition[positionName] || 0) + 1;\n      });\n      const salaries = employees.filter(emp => emp.salary && emp.salary > 0).map(emp => emp.salary);\n      const averageSalary = salaries.length > 0 ? salaries.reduce((sum, salary) => sum + salary, 0) / salaries.length : 0;\n      return {\n        total,\n        byPosition,\n        averageSalary: Math.round(averageSalary * 100) / 100\n      };\n    }), catchError(this.handleError));\n  }\n  /**\r\n   * Проверить, существует ли employee_id\r\n   */\n  checkEmployeeIdExists(employeeId, excludeId) {\n    try {\n      const employees = this.dbService.getEmployeesSync();\n      return employees.some(employee => employee.employee_id === employeeId && employee.id !== excludeId);\n    } catch (error) {\n      console.error('Error checking employee ID:', error);\n      return false;\n    }\n  }\n  /**\r\n   * Валидация email\r\n   */\n  isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n  /**\r\n   * Получить сотрудников с высокой зарплатой\r\n   */\n  getHighSalaryEmployees(threshold = 50000) {\n    return this.getEmployees().pipe(map(employees => employees.filter(employee => employee.salary && employee.salary >= threshold).sort((a, b) => (b.salary || 0) - (a.salary || 0))), catchError(this.handleError));\n  }\n  /**\r\n   * Экспорт данных сотрудников в CSV формат\r\n   */\n  exportToCsv() {\n    return this.getEmployees().pipe(map(employees => {\n      if (employees.length === 0) {\n        throw new Error('Нет данных для экспорта');\n      }\n      const headers = ['ID', 'Employee ID', 'First Name', 'Last Name', 'Position', 'Email', 'Phone', 'Salary'];\n      const csvRows = [headers.join(',')];\n      employees.forEach(employee => {\n        const row = [employee.id, `\"${employee.employee_id}\"`, `\"${employee.first_name}\"`, `\"${employee.last_name}\"`, `\"${employee.position_name || ''}\"`, `\"${employee.contact_email || ''}\"`, `\"${employee.contact_phone || ''}\"`, employee.salary || 0];\n        csvRows.push(row.join(','));\n      });\n      return csvRows.join('\\n');\n    }), catchError(this.handleError));\n  }\n  static {\n    this.ɵfac = function EmployeeService_Factory(t) {\n      return new (t || EmployeeService)(i0.ɵɵinject(i1.JsonDatabaseService), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EmployeeService,\n      factory: EmployeeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","throwError","map","catchError","EmployeeService","constructor","dbService","authService","checkAuthentication","validateToken","Error","handleError","error","console","errorMessage","message","getEmployees","pipe","getEmployeeById","id","employee","createEmployee","employeeData","log","employee_id","first_name","last_name","trim","contact_email","isValidEmail","salary","newEmployee","updateEmployee","updatedEmployee","deleteEmployee","success","getPositions","createPosition","positionData","name","length","newPosition","deletePosition","searchEmployees","query","searchTerm","toLowerCase","employees","filter","includes","middle_name","getEmployeesByPosition","positionId","position_id","getEmployeeStats","total","byPosition","forEach","positionName","position_name","salaries","emp","averageSalary","reduce","sum","Math","round","checkEmployeeIdExists","employeeId","excludeId","getEmployeesSync","some","email","emailRegex","test","getHighSalaryEmployees","threshold","sort","a","b","exportToCsv","headers","csvRows","join","row","contact_phone","push","i0","ɵɵinject","i1","JsonDatabaseService","i2","AuthService","factory","ɵfac","providedIn"],"sources":["D:\\employee-management\\src\\app\\shared\\services\\employee.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { IEmployee, IPosition } from '../interfaces/employee.interface';\r\nimport { JsonDatabaseService } from './json-database.service';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeService {\r\n\r\n  constructor(\r\n    private dbService: JsonDatabaseService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  private checkAuthentication(): void {\r\n    if (!this.authService.validateToken()) {\r\n      throw new Error('Неавторизованный доступ. Пожалуйста, войдите снова.');\r\n    }\r\n  }\r\n\r\n  private handleError(error: any): Observable<never> {\r\n    console.error('Employee Service Error:', error);\r\n    const errorMessage = error.message || 'Что-то пошло не так. Пожалуйста, попробуйте снова.';\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n  /**\r\n   * Получить список всех сотрудников\r\n   */\r\n  public getEmployees(): Observable<IEmployee[]> {\r\n    return this.dbService.getEmployees().pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Получить сотрудника по ID\r\n   */\r\n  public getEmployeeById(id: number): Observable<IEmployee> {\r\n    if (!id || id <= 0) {\r\n      return throwError(() => new Error('Неверный идентификатор сотрудника'));\r\n    }\r\n\r\n    const employee = this.dbService.getEmployeeById(id);\r\n    if (!employee) {\r\n      return throwError(() => new Error('Сотрудник не найден'));\r\n    }\r\n\r\n    return of(employee).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Создать нового сотрудника\r\n   */\r\n  public createEmployee(employeeData: Omit<IEmployee, 'id' | 'created_at' | 'updated_at' | 'position_name'>): Observable<IEmployee> {\r\n    try {\r\n      this.checkAuthentication();\r\n      console.log('Creating employee:', employeeData);\r\n\r\n      // Валидация обязательных полей\r\n      if (!employeeData.employee_id || !employeeData.first_name || !employeeData.last_name) {\r\n        return throwError(() => new Error('ID сотрудника, имя и фамилия обязательны для заполнения'));\r\n      }\r\n\r\n      if (typeof employeeData.employee_id !== 'string' || employeeData.employee_id.trim() === '') {\r\n        return throwError(() => new Error('ID сотрудника должен быть непустой строкой'));\r\n      }\r\n\r\n      if (typeof employeeData.first_name !== 'string' || employeeData.first_name.trim() === '') {\r\n        return throwError(() => new Error('Имя должно быть непустой строкой'));\r\n      }\r\n\r\n      if (typeof employeeData.last_name !== 'string' || employeeData.last_name.trim() === '') {\r\n        return throwError(() => new Error('Фамилия должна быть непустой строкой'));\r\n      }\r\n\r\n      // Валидация email\r\n      if (employeeData.contact_email && !this.isValidEmail(employeeData.contact_email)) {\r\n        return throwError(() => new Error('Неверный формат email'));\r\n      }\r\n\r\n      // Валидация зарплаты\r\n      if (employeeData.salary && employeeData.salary < 0) {\r\n        return throwError(() => new Error('Зарплата не может быть отрицательной'));\r\n      }\r\n\r\n      const newEmployee = this.dbService.createEmployee(employeeData);\r\n      return of(newEmployee).pipe(\r\n        catchError(this.handleError)\r\n      );\r\n    } catch (error: any) {\r\n      return this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновить данные сотрудника\r\n   */\r\n  public updateEmployee(id: number, employeeData: Omit<IEmployee, 'id' | 'created_at' | 'updated_at' | 'position_name'>): Observable<IEmployee> {\r\n    try {\r\n      this.checkAuthentication();\r\n      console.log('Updating employee:', { id, employeeData });\r\n\r\n      if (!id || id <= 0) {\r\n        return throwError(() => new Error('Неверный идентификатор сотрудника'));\r\n      }\r\n\r\n      // Валидация обязательных полей\r\n      if (!employeeData.employee_id || !employeeData.first_name || !employeeData.last_name) {\r\n        return throwError(() => new Error('ID сотрудника, имя и фамилия обязательны для заполнения'));\r\n      }\r\n\r\n      if (typeof employeeData.employee_id !== 'string' || employeeData.employee_id.trim() === '') {\r\n        return throwError(() => new Error('ID сотрудника должен быть непустой строкой'));\r\n      }\r\n\r\n      // Валидация email\r\n      if (employeeData.contact_email && !this.isValidEmail(employeeData.contact_email)) {\r\n        return throwError(() => new Error('Неверный формат email'));\r\n      }\r\n\r\n      // Валидация зарплаты\r\n      if (employeeData.salary && employeeData.salary < 0) {\r\n        return throwError(() => new Error('Зарплата не может быть отрицательной'));\r\n      }\r\n\r\n      const updatedEmployee = this.dbService.updateEmployee(id, employeeData);\r\n      if (!updatedEmployee) {\r\n        return throwError(() => new Error('Сотрудник не найден'));\r\n      }\r\n\r\n      return of(updatedEmployee).pipe(\r\n        catchError(this.handleError)\r\n      );\r\n    } catch (error: any) {\r\n      return this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Удалить сотрудника\r\n   */\r\n  public deleteEmployee(id: number): Observable<void> {\r\n    try {\r\n      this.checkAuthentication();\r\n\r\n      if (!id || id <= 0) {\r\n        return throwError(() => new Error('Неверный идентификатор сотрудника'));\r\n      }\r\n\r\n      const success = this.dbService.deleteEmployee(id);\r\n      if (!success) {\r\n        return throwError(() => new Error('Сотрудник не найден'));\r\n      }\r\n\r\n      return of(void 0).pipe(\r\n        catchError(this.handleError)\r\n      );\r\n    } catch (error: any) {\r\n      return this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получить список всех должностей\r\n   */\r\n  public getPositions(): Observable<IPosition[]> {\r\n    return this.dbService.getPositions().pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Создать новую должность\r\n   */\r\n  public createPosition(positionData: Omit<IPosition, 'id' | 'created_at'>): Observable<IPosition> {\r\n    try {\r\n      this.checkAuthentication();\r\n\r\n      if (!positionData.name || typeof positionData.name !== 'string' || positionData.name.trim() === '') {\r\n        return throwError(() => new Error('Название должности обязательно для заполнения'));\r\n      }\r\n\r\n      if (positionData.name.trim().length < 2) {\r\n        return throwError(() => new Error('Название должности должно содержать минимум 2 символа'));\r\n      }\r\n\r\n      const newPosition = this.dbService.createPosition(positionData);\r\n      return of(newPosition).pipe(\r\n        catchError(this.handleError)\r\n      );\r\n    } catch (error: any) {\r\n      return this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Удалить должность\r\n   */\r\n  public deletePosition(id: number): Observable<void> {\r\n    try {\r\n      this.checkAuthentication();\r\n\r\n      if (!id || id <= 0) {\r\n        return throwError(() => new Error('Неверный идентификатор должности'));\r\n      }\r\n\r\n      const success = this.dbService.deletePosition(id);\r\n      if (!success) {\r\n        return throwError(() => new Error('Должность не найдена'));\r\n      }\r\n\r\n      return of(void 0).pipe(\r\n        catchError(this.handleError)\r\n      );\r\n    } catch (error: any) {\r\n      return this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Поиск сотрудников по имени или фамилии\r\n   */\r\n  public searchEmployees(query: string): Observable<IEmployee[]> {\r\n    if (!query || query.trim() === '') {\r\n      return this.getEmployees();\r\n    }\r\n\r\n    const searchTerm = query.toLowerCase().trim();\r\n    \r\n    return this.getEmployees().pipe(\r\n      map(employees => employees.filter(employee =>\r\n        employee.first_name.toLowerCase().includes(searchTerm) ||\r\n        employee.last_name.toLowerCase().includes(searchTerm) ||\r\n        employee.employee_id.toLowerCase().includes(searchTerm) ||\r\n        (employee.middle_name && employee.middle_name.toLowerCase().includes(searchTerm))\r\n      )),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Получить сотрудников по должности\r\n   */\r\n  public getEmployeesByPosition(positionId: number): Observable<IEmployee[]> {\r\n    if (!positionId || positionId <= 0) {\r\n      return throwError(() => new Error('Неверный идентификатор должности'));\r\n    }\r\n\r\n    return this.getEmployees().pipe(\r\n      map(employees => employees.filter(employee => employee.position_id === positionId)),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Получить статистику по сотрудникам\r\n   */\r\n  public getEmployeeStats(): Observable<{\r\n    total: number;\r\n    byPosition: { [positionName: string]: number };\r\n    averageSalary: number;\r\n  }> {\r\n    return this.getEmployees().pipe(\r\n      map(employees => {\r\n        const total = employees.length;\r\n        \r\n        const byPosition: { [positionName: string]: number } = {};\r\n        employees.forEach(employee => {\r\n          const positionName = employee.position_name || 'Не указана';\r\n          byPosition[positionName] = (byPosition[positionName] || 0) + 1;\r\n        });\r\n\r\n        const salaries = employees\r\n          .filter(emp => emp.salary && emp.salary > 0)\r\n          .map(emp => emp.salary) as number[];\r\n        \r\n        const averageSalary = salaries.length > 0 \r\n          ? salaries.reduce((sum, salary) => sum + salary, 0) / salaries.length \r\n          : 0;\r\n\r\n        return {\r\n          total,\r\n          byPosition,\r\n          averageSalary: Math.round(averageSalary * 100) / 100\r\n        };\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Проверить, существует ли employee_id\r\n   */\r\n  public checkEmployeeIdExists(employeeId: string, excludeId?: number): boolean {\r\n    try {\r\n      const employees = this.dbService.getEmployeesSync();\r\n      return employees.some(employee => \r\n        employee.employee_id === employeeId && \r\n        employee.id !== excludeId\r\n      );\r\n    } catch (error) {\r\n      console.error('Error checking employee ID:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Валидация email\r\n   */\r\n  private isValidEmail(email: string): boolean {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n\r\n  /**\r\n   * Получить сотрудников с высокой зарплатой\r\n   */\r\n  public getHighSalaryEmployees(threshold: number = 50000): Observable<IEmployee[]> {\r\n    return this.getEmployees().pipe(\r\n      map(employees => employees.filter(employee => \r\n        employee.salary && employee.salary >= threshold\r\n      ).sort((a, b) => (b.salary || 0) - (a.salary || 0))),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Экспорт данных сотрудников в CSV формат\r\n   */\r\n  public exportToCsv(): Observable<string> {\r\n    return this.getEmployees().pipe(\r\n      map(employees => {\r\n        if (employees.length === 0) {\r\n          throw new Error('Нет данных для экспорта');\r\n        }\r\n\r\n        const headers = ['ID', 'Employee ID', 'First Name', 'Last Name', 'Position', 'Email', 'Phone', 'Salary'];\r\n        const csvRows = [headers.join(',')];\r\n\r\n        employees.forEach(employee => {\r\n          const row = [\r\n            employee.id,\r\n            `\"${employee.employee_id}\"`,\r\n            `\"${employee.first_name}\"`,\r\n            `\"${employee.last_name}\"`,\r\n            `\"${employee.position_name || ''}\"`,\r\n            `\"${employee.contact_email || ''}\"`,\r\n            `\"${employee.contact_phone || ''}\"`,\r\n            employee.salary || 0\r\n          ];\r\n          csvRows.push(row.join(','));\r\n        });\r\n\r\n        return csvRows.join('\\n');\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}