{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TranslationService {\n  constructor(http) {\n    this.http = http;\n    this.currentLang = new BehaviorSubject('ru');\n    this.translationsCache = new Map();\n  }\n  loadTranslations(lang) {\n    if (!this.translationsCache.has(lang)) {\n      const translations$ = this.http.get(`/assets/i18n/${lang}.json`).pipe(shareReplay(1));\n      this.translationsCache.set(lang, translations$);\n    }\n    return this.translationsCache.get(lang);\n  }\n  translate(key) {\n    return this.loadTranslations(this.currentLang.value).pipe(map(translations => {\n      // Поддержка вложенных ключей типа 'EMPLOYEE.LIST'\n      const value = this.getNestedTranslation(translations, key);\n      return value || key;\n    }));\n  }\n  getNestedTranslation(translations, key) {\n    return key.split('.').reduce((obj, part) => obj?.[part], translations);\n  }\n  setLanguage(lang) {\n    this.currentLang.next(lang);\n  }\n  getCurrentLang() {\n    return this.currentLang.value;\n  }\n  getLanguageObservable() {\n    return this.currentLang.asObservable();\n  }\n  static {\n    this.ɵfac = function TranslationService_Factory(t) {\n      return new (t || TranslationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TranslationService,\n      factory: TranslationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","shareReplay","TranslationService","constructor","http","currentLang","translationsCache","Map","loadTranslations","lang","has","translations$","get","pipe","set","translate","key","value","translations","getNestedTranslation","split","reduce","obj","part","setLanguage","next","getCurrentLang","getLanguageObservable","asObservable","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\employee-management\\src\\app\\services\\translation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, tap, shareReplay } from 'rxjs/operators';\r\n\r\ninterface Translations {\r\n  [key: string]: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TranslationService {\r\n  private currentLang = new BehaviorSubject<string>('ru');\r\n  private translationsCache = new Map<string, Observable<Translations>>();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public loadTranslations(lang: string): Observable<Translations> {\r\n    if (!this.translationsCache.has(lang)) {\r\n      const translations$ = this.http.get<Translations>(`/assets/i18n/${lang}.json`).pipe(\r\n        shareReplay(1)\r\n      );\r\n      this.translationsCache.set(lang, translations$);\r\n    }\r\n    return this.translationsCache.get(lang)!;\r\n  }\r\n\r\n  public translate(key: string): Observable<string> {\r\n    return this.loadTranslations(this.currentLang.value).pipe(\r\n      map(translations => {\r\n        // Поддержка вложенных ключей типа 'EMPLOYEE.LIST'\r\n        const value = this.getNestedTranslation(translations, key);\r\n        return value || key;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getNestedTranslation(translations: any, key: string): string {\r\n    return key.split('.').reduce((obj, part) => obj?.[part], translations);\r\n  }\r\n\r\n  public setLanguage(lang: string): void {\r\n    this.currentLang.next(lang);\r\n  }\r\n\r\n  public getCurrentLang(): string {\r\n    return this.currentLang.value;\r\n  }\r\n\r\n  public getLanguageObservable(): Observable<string> {\r\n    return this.currentLang.asObservable();\r\n  }\r\n}"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,EAAOC,WAAW,QAAQ,gBAAgB;;;AAStD,OAAM,MAAOC,kBAAkB;EAI7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,WAAW,GAAG,IAAIN,eAAe,CAAS,IAAI,CAAC;IAC/C,KAAAO,iBAAiB,GAAG,IAAIC,GAAG,EAAoC;EAEhC;EAEhCC,gBAAgBA,CAACC,IAAY;IAClC,IAAI,CAAC,IAAI,CAACH,iBAAiB,CAACI,GAAG,CAACD,IAAI,CAAC,EAAE;MACrC,MAAME,aAAa,GAAG,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAe,gBAAgBH,IAAI,OAAO,CAAC,CAACI,IAAI,CACjFZ,WAAW,CAAC,CAAC,CAAC,CACf;MACD,IAAI,CAACK,iBAAiB,CAACQ,GAAG,CAACL,IAAI,EAAEE,aAAa,CAAC;;IAEjD,OAAO,IAAI,CAACL,iBAAiB,CAACM,GAAG,CAACH,IAAI,CAAE;EAC1C;EAEOM,SAASA,CAACC,GAAW;IAC1B,OAAO,IAAI,CAACR,gBAAgB,CAAC,IAAI,CAACH,WAAW,CAACY,KAAK,CAAC,CAACJ,IAAI,CACvDb,GAAG,CAACkB,YAAY,IAAG;MACjB;MACA,MAAMD,KAAK,GAAG,IAAI,CAACE,oBAAoB,CAACD,YAAY,EAAEF,GAAG,CAAC;MAC1D,OAAOC,KAAK,IAAID,GAAG;IACrB,CAAC,CAAC,CACH;EACH;EAEQG,oBAAoBA,CAACD,YAAiB,EAAEF,GAAW;IACzD,OAAOA,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAAC,EAAEL,YAAY,CAAC;EACxE;EAEOM,WAAWA,CAACf,IAAY;IAC7B,IAAI,CAACJ,WAAW,CAACoB,IAAI,CAAChB,IAAI,CAAC;EAC7B;EAEOiB,cAAcA,CAAA;IACnB,OAAO,IAAI,CAACrB,WAAW,CAACY,KAAK;EAC/B;EAEOU,qBAAqBA,CAAA;IAC1B,OAAO,IAAI,CAACtB,WAAW,CAACuB,YAAY,EAAE;EACxC;;;uBAxCW1B,kBAAkB,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAlB9B,kBAAkB;MAAA+B,OAAA,EAAlB/B,kBAAkB,CAAAgC,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}