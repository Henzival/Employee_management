{"ast":null,"code":"import { BehaviorSubject, Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ModalService {\n  constructor() {\n    this.modalSubject = new BehaviorSubject(null);\n  }\n  showAlert(title, message) {\n    return new Observable(observer => {\n      this.modalSubject.next({\n        config: {\n          title,\n          message,\n          type: 'alert',\n          confirmText: 'OK'\n        },\n        callback: result => {\n          observer.next();\n          observer.complete();\n        }\n      });\n    });\n  }\n  showConfirm(title, message, confirmText = 'Да', cancelText = 'Отмена') {\n    return new Observable(observer => {\n      this.modalSubject.next({\n        config: {\n          title,\n          message,\n          type: 'confirm',\n          confirmText,\n          cancelText\n        },\n        callback: result => {\n          observer.next(result.confirmed);\n          observer.complete();\n        }\n      });\n    });\n  }\n  getModal() {\n    return this.modalSubject.asObservable();\n  }\n  closeModal(result) {\n    this.modalSubject.next(null);\n  }\n  static {\n    this.ɵfac = function ModalService_Factory(t) {\n      return new (t || ModalService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ModalService,\n      factory: ModalService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","Observable","ModalService","constructor","modalSubject","showAlert","title","message","observer","next","config","type","confirmText","callback","result","complete","showConfirm","cancelText","confirmed","getModal","asObservable","closeModal","factory","ɵfac","providedIn"],"sources":["D:\\employee-management\\src\\app\\services\\modal.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport interface ModalConfig {\r\n  title: string;\r\n  message: string;\r\n  type: 'alert' | 'confirm' | 'prompt';\r\n  confirmText?: string;\r\n  cancelText?: string;\r\n  inputValue?: string;\r\n}\r\n\r\nexport interface ModalResult {\r\n  confirmed: boolean;\r\n  value?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ModalService {\r\n  private modalSubject = new BehaviorSubject<{config: ModalConfig, callback: (result: ModalResult) => void} | null>(null);\r\n  \r\n  public showAlert(title: string, message: string): Observable<void> {\r\n    return new Observable(observer => {\r\n      this.modalSubject.next({\r\n        config: {\r\n          title,\r\n          message,\r\n          type: 'alert',\r\n          confirmText: 'OK'\r\n        },\r\n        callback: (result) => {\r\n          observer.next();\r\n          observer.complete();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public showConfirm(title: string, message: string, confirmText: string = 'Да', cancelText: string = 'Отмена'): Observable<boolean> {\r\n    return new Observable(observer => {\r\n      this.modalSubject.next({\r\n        config: {\r\n          title,\r\n          message,\r\n          type: 'confirm',\r\n          confirmText,\r\n          cancelText\r\n        },\r\n        callback: (result) => {\r\n          observer.next(result.confirmed);\r\n          observer.complete();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public getModal(): Observable<{config: ModalConfig, callback: (result: ModalResult) => void} | null> {\r\n    return this.modalSubject.asObservable();\r\n  }\r\n\r\n  public closeModal(result: ModalResult): void {\r\n    this.modalSubject.next(null);\r\n  }\r\n}"],"mappings":"AACA,SAASA,eAAe,EAAEC,UAAU,QAAQ,MAAM;;AAmBlD,OAAM,MAAOC,YAAY;EAHzBC,YAAA;IAIU,KAAAC,YAAY,GAAG,IAAIJ,eAAe,CAAwE,IAAI,CAAC;;EAEhHK,SAASA,CAACC,KAAa,EAAEC,OAAe;IAC7C,OAAO,IAAIN,UAAU,CAACO,QAAQ,IAAG;MAC/B,IAAI,CAACJ,YAAY,CAACK,IAAI,CAAC;QACrBC,MAAM,EAAE;UACNJ,KAAK;UACLC,OAAO;UACPI,IAAI,EAAE,OAAO;UACbC,WAAW,EAAE;SACd;QACDC,QAAQ,EAAGC,MAAM,IAAI;UACnBN,QAAQ,CAACC,IAAI,EAAE;UACfD,QAAQ,CAACO,QAAQ,EAAE;QACrB;OACD,CAAC;IACJ,CAAC,CAAC;EACJ;EAEOC,WAAWA,CAACV,KAAa,EAAEC,OAAe,EAAEK,WAAA,GAAsB,IAAI,EAAEK,UAAA,GAAqB,QAAQ;IAC1G,OAAO,IAAIhB,UAAU,CAACO,QAAQ,IAAG;MAC/B,IAAI,CAACJ,YAAY,CAACK,IAAI,CAAC;QACrBC,MAAM,EAAE;UACNJ,KAAK;UACLC,OAAO;UACPI,IAAI,EAAE,SAAS;UACfC,WAAW;UACXK;SACD;QACDJ,QAAQ,EAAGC,MAAM,IAAI;UACnBN,QAAQ,CAACC,IAAI,CAACK,MAAM,CAACI,SAAS,CAAC;UAC/BV,QAAQ,CAACO,QAAQ,EAAE;QACrB;OACD,CAAC;IACJ,CAAC,CAAC;EACJ;EAEOI,QAAQA,CAAA;IACb,OAAO,IAAI,CAACf,YAAY,CAACgB,YAAY,EAAE;EACzC;EAEOC,UAAUA,CAACP,MAAmB;IACnC,IAAI,CAACV,YAAY,CAACK,IAAI,CAAC,IAAI,CAAC;EAC9B;;;uBA5CWP,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAoB,OAAA,EAAZpB,YAAY,CAAAqB,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}