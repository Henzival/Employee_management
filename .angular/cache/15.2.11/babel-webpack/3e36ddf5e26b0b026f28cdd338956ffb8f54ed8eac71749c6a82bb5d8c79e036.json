{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { combineLatest, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nlet EmployeeListComponent = class EmployeeListComponent {\n  constructor(employeeService, authService, translationService) {\n    this.employeeService = employeeService;\n    this.authService = authService;\n    this.translationService = translationService;\n    // Фильтры как BehaviorSubject\n    this.sortBySubject = new BehaviorSubject('last_name');\n    this.filterPositionSubject = new BehaviorSubject('all');\n    // Загружаем данные\n    this.positions$ = this.employeeService.getPositions();\n    this.employees$ = this.employeeService.getEmployees();\n    this.isAdmin$ = this.authService.isLoggedIn();\n    // Комбинируем данные и фильтры\n    this.filteredEmployees$ = this.createFilteredEmployees();\n  }\n  ngOnInit() {\n    // Инициализация фильтров\n    this.filterPositionSubject.next('all');\n  }\n  createFilteredEmployees() {\n    return combineLatest([this.employees$, this.positions$, this.sortBySubject, this.filterPositionSubject]).pipe(map(([employees, positions, sortBy, filterPosition]) => {\n      let filtered = [...employees];\n      // Фильтрация по должности\n      if (filterPosition && filterPosition !== 'all') {\n        filtered = filtered.filter(emp => emp.position_id === parseInt(filterPosition));\n      }\n      // Сортировка\n      filtered.sort((a, b) => {\n        switch (sortBy) {\n          case 'last_name':\n            return a.last_name.localeCompare(b.last_name);\n          case 'position':\n            return (a.position_name || '').localeCompare(b.position_name || '');\n          default:\n            return 0;\n        }\n      });\n      return filtered;\n    }));\n  }\n  // Методы для изменения фильтров\n  onSortChange(sortBy) {\n    this.sortBySubject.next(sortBy);\n  }\n  onPositionFilterChange(positionId) {\n    this.filterPositionSubject.next(positionId);\n  }\n  // Сброс фильтров\n  resetFilters() {\n    this.filterPositionSubject.next('all');\n    this.sortBySubject.next('last_name');\n  }\n  // Вспомогательные методы для шаблона\n  getEmployeesCountByPosition(employees, positionId) {\n    return employees.filter(emp => emp.position_id === positionId).length;\n  }\n  // Получить текущие значения фильтров (для шаблона)\n  getCurrentFilterPosition() {\n    return this.filterPositionSubject.asObservable();\n  }\n  getCurrentSortBy() {\n    return this.sortBySubject.asObservable();\n  }\n};\nEmployeeListComponent = __decorate([Component({\n  selector: 'app-employee-list',\n  templateUrl: './employee-list.component.html',\n  styleUrls: ['./employee-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], EmployeeListComponent);\nexport { EmployeeListComponent };","map":{"version":3,"names":["ChangeDetectionStrategy","Component","combineLatest","BehaviorSubject","map","EmployeeListComponent","constructor","employeeService","authService","translationService","sortBySubject","filterPositionSubject","positions$","getPositions","employees$","getEmployees","isAdmin$","isLoggedIn","filteredEmployees$","createFilteredEmployees","ngOnInit","next","pipe","employees","positions","sortBy","filterPosition","filtered","filter","emp","position_id","parseInt","sort","a","b","last_name","localeCompare","position_name","onSortChange","onPositionFilterChange","positionId","resetFilters","getEmployeesCountByPosition","length","getCurrentFilterPosition","asObservable","getCurrentSortBy","__decorate","selector","templateUrl","styleUrls","changeDetection","OnPush"],"sources":["D:\\employee-management\\src\\app\\components\\employee-list\\employee-list.component.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { Observable, combineLatest, BehaviorSubject } from 'rxjs';\r\nimport { map, tap, startWith, switchMap } from 'rxjs/operators';\r\nimport { EmployeeService } from '../../services/employee.service';\r\nimport { TranslationService } from '../../services/translation.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { IEmployee, IPosition } from '../../interfaces/employee.interface';\r\n\r\n@Component({\r\n  selector: 'app-employee-list',\r\n  templateUrl: './employee-list.component.html',\r\n  styleUrls: ['./employee-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EmployeeListComponent implements OnInit {\r\n  // Observable данные\r\n  employees$: Observable<IEmployee[]>;\r\n  positions$: Observable<IPosition[]>;\r\n  isAdmin$: Observable<boolean>;\r\n  \r\n  // Фильтры как BehaviorSubject\r\n  private sortBySubject = new BehaviorSubject<string>('last_name');\r\n  private filterPositionSubject = new BehaviorSubject<string>('all');\r\n\r\n  // Комбинированный Observable для отфильтрованных сотрудников\r\n  filteredEmployees$: Observable<IEmployee[]>;\r\n\r\n  constructor(\r\n    private employeeService: EmployeeService,\r\n    private authService: AuthService,\r\n    public translationService: TranslationService\r\n  ) {\r\n    // Загружаем данные\r\n    this.positions$ = this.employeeService.getPositions();\r\n    this.employees$ = this.employeeService.getEmployees();\r\n    this.isAdmin$ = this.authService.isLoggedIn();\r\n\r\n    // Комбинируем данные и фильтры\r\n    this.filteredEmployees$ = this.createFilteredEmployees();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Инициализация фильтров\r\n    this.filterPositionSubject.next('all');\r\n  }\r\n\r\n  private createFilteredEmployees(): Observable<IEmployee[]> {\r\n    return combineLatest([\r\n      this.employees$,\r\n      this.positions$,\r\n      this.sortBySubject,\r\n      this.filterPositionSubject\r\n    ]).pipe(\r\n      map(([employees, positions, sortBy, filterPosition]) => {\r\n        let filtered = [...employees];\r\n\r\n        // Фильтрация по должности\r\n        if (filterPosition && filterPosition !== 'all') {\r\n          filtered = filtered.filter(emp =>\r\n            emp.position_id === parseInt(filterPosition)\r\n          );\r\n        }\r\n\r\n        // Сортировка\r\n        filtered.sort((a, b) => {\r\n          switch (sortBy) {\r\n            case 'last_name':\r\n              return a.last_name.localeCompare(b.last_name);\r\n            case 'position':\r\n              return (a.position_name || '').localeCompare(b.position_name || '');\r\n            default:\r\n              return 0;\r\n          }\r\n        });\r\n\r\n        return filtered;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Методы для изменения фильтров\r\n  public onSortChange(sortBy: string): void {\r\n    this.sortBySubject.next(sortBy);\r\n  }\r\n\r\n  public onPositionFilterChange(positionId: string): void {\r\n    this.filterPositionSubject.next(positionId);\r\n  }\r\n\r\n  // Сброс фильтров\r\n  public resetFilters(): void {\r\n    this.filterPositionSubject.next('all');\r\n    this.sortBySubject.next('last_name');\r\n  }\r\n\r\n  // Вспомогательные методы для шаблона\r\n  public getEmployeesCountByPosition(employees: IEmployee[], positionId: number): number {\r\n    return employees.filter(emp => emp.position_id === positionId).length;\r\n  }\r\n\r\n  // Получить текущие значения фильтров (для шаблона)\r\n  public getCurrentFilterPosition(): Observable<string> {\r\n    return this.filterPositionSubject.asObservable();\r\n  }\r\n\r\n  public getCurrentSortBy(): Observable<string> {\r\n    return this.sortBySubject.asObservable();\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}