{"ast":null,"code":"var _AuthGuard;\nimport { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    return this.authService.isLoggedIn().pipe(take(1), map(isLoggedIn => {\n      // Проверяем не только наличие токена, но и его валидность\n      const isValid = this.authService.validateToken();\n      if (!isLoggedIn || !isValid) {\n        console.log('AuthGuard: Not authenticated or token invalid, redirecting to login');\n        this.authService.logout(); // Очищаем невалидный токен\n        this.router.navigate(['/login']);\n        return false;\n      }\n      console.log('AuthGuard: Access granted');\n      return true;\n    }));\n  }\n}\n_AuthGuard = AuthGuard;\n_AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || _AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\n_AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _AuthGuard,\n  factory: _AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","take","AuthGuard","constructor","authService","router","canActivate","isLoggedIn","pipe","isValid","validateToken","console","log","logout","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\karpova\\Desktop\\дома-доделал\\employee-management\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(): Observable<boolean> {\r\n    return this.authService.isLoggedIn().pipe(\r\n      take(1),\r\n      map(isLoggedIn => {\r\n        // Проверяем не только наличие токена, но и его валидность\r\n        const isValid = this.authService.validateToken();\r\n        \r\n        if (!isLoggedIn || !isValid) {\r\n          console.log('AuthGuard: Not authenticated or token invalid, redirecting to login');\r\n          this.authService.logout(); // Очищаем невалидный токен\r\n          this.router.navigate(['/login']);\r\n          return false;\r\n        }\r\n        \r\n        console.log('AuthGuard: Access granted');\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n}"],"mappings":";AAIA,SAASA,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;;;AAK1C,OAAM,MAAOC,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,WAAW,CAACG,UAAU,EAAE,CAACC,IAAI,CACvCP,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAACO,UAAU,IAAG;MACf;MACA,MAAME,OAAO,GAAG,IAAI,CAACL,WAAW,CAACM,aAAa,EAAE;MAEhD,IAAI,CAACH,UAAU,IAAI,CAACE,OAAO,EAAE;QAC3BE,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC;QAClF,IAAI,CAACR,WAAW,CAACS,MAAM,EAAE,CAAC,CAAC;QAC3B,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,KAAK;;MAGdH,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MACxC,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACH;;aArBWV,SAAS;;mBAATA,UAAS,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAATlB,UAAS;EAAAmB,OAAA,EAATnB,UAAS,CAAAoB,IAAA;EAAAC,UAAA,EAFR;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}