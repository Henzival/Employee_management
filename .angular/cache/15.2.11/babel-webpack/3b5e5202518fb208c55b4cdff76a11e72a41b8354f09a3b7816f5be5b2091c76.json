{"ast":null,"code":"var _AuthService;\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api';\n    this.isAuthenticated = new BehaviorSubject(this.hasToken());\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/auth/login`, {\n      username,\n      password\n    }).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem('auth_token', response.token);\n        this.isAuthenticated.next(true);\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem('auth_token');\n    this.isAuthenticated.next(false);\n  }\n  isLoggedIn() {\n    return this.isAuthenticated.asObservable();\n  }\n  hasToken() {\n    return !!localStorage.getItem('auth_token');\n  }\n  getToken() {\n    return localStorage.getItem('auth_token');\n  }\n}\n_AuthService = AuthService;\n_AuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || _AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n_AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _AuthService,\n  factory: _AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","apiUrl","isAuthenticated","hasToken","login","username","password","post","pipe","response","token","localStorage","setItem","next","logout","removeItem","isLoggedIn","asObservable","getItem","getToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\karpova\\Desktop\\дома-доделал\\employee-management\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:3000/api';\r\n  private isAuthenticated = new BehaviorSubject<boolean>(this.hasToken());\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/auth/login`, { username, password })\r\n      .pipe(\r\n        tap((response: any) => {\r\n          if (response.token) {\r\n            localStorage.setItem('auth_token', response.token);\r\n            this.isAuthenticated.next(true);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('auth_token');\r\n    this.isAuthenticated.next(false);\r\n  }\r\n\r\n  isLoggedIn(): Observable<boolean> {\r\n    return this.isAuthenticated.asObservable();\r\n  }\r\n\r\n  private hasToken(): boolean {\r\n    return !!localStorage.getItem('auth_token');\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('auth_token');\r\n  }\r\n}"],"mappings":";AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,2BAA2B;IACpC,KAAAC,eAAe,GAAG,IAAIN,eAAe,CAAU,IAAI,CAACO,QAAQ,EAAE,CAAC;EAEhC;EAEvCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACN,MAAM,aAAa,EAAE;MAAEI,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CACvEE,IAAI,CACHX,GAAG,CAAEY,QAAa,IAAI;MACpB,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAClBC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEH,QAAQ,CAACC,KAAK,CAAC;QAClD,IAAI,CAACR,eAAe,CAACW,IAAI,CAAC,IAAI,CAAC;;IAEnC,CAAC,CAAC,CACH;EACL;EAEAC,MAAMA,CAAA;IACJH,YAAY,CAACI,UAAU,CAAC,YAAY,CAAC;IACrC,IAAI,CAACb,eAAe,CAACW,IAAI,CAAC,KAAK,CAAC;EAClC;EAEAG,UAAUA,CAAA;IACR,OAAO,IAAI,CAACd,eAAe,CAACe,YAAY,EAAE;EAC5C;EAEQd,QAAQA,CAAA;IACd,OAAO,CAAC,CAACQ,YAAY,CAACO,OAAO,CAAC,YAAY,CAAC;EAC7C;EAEAC,QAAQA,CAAA;IACN,OAAOR,YAAY,CAACO,OAAO,CAAC,YAAY,CAAC;EAC3C;;eAjCWpB,WAAW;;mBAAXA,YAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXzB,YAAW;EAAA0B,OAAA,EAAX1B,YAAW,CAAA2B,IAAA;EAAAC,UAAA,EAFV;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}