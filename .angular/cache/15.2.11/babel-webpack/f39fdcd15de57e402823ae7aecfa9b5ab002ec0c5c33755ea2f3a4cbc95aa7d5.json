{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class EmployeeService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'http://localhost:3000/api';\n  }\n  getHeaders() {\n    const token = this.authService.getToken();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  handleError(error) {\n    console.error('API Error:', error);\n    if (error.status === 401) {\n      return throwError(() => new Error('Неавторизованный доступ. Пожалуйста, войдите снова.'));\n    } else if (error.status === 400) {\n      return throwError(() => new Error(error.error?.error || 'Неверный запрос'));\n    } else if (error.status === 500) {\n      return throwError(() => new Error('Ошибка сервера. Попробуйте позже.'));\n    } else {\n      return throwError(() => new Error('Что-то пошло не так. Пожалуйста, попробуйте снова.'));\n    }\n  }\n  getEmployees() {\n    return this.http.get(`${this.apiUrl}/employees`).pipe(catchError(this.handleError));\n  }\n  getEmployeeById(id) {\n    return this.http.get(`${this.apiUrl}/employees/${id}`).pipe(catchError(this.handleError));\n  }\n  createEmployee(employee) {\n    return this.http.post(`${this.apiUrl}/employees`, employee, {\n      headers: this.getHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  updateEmployee(id, employee) {\n    return this.http.put(`${this.apiUrl}/employees/${id}`, employee, {\n      headers: this.getHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  deleteEmployee(id) {\n    return this.http.delete(`${this.apiUrl}/employees/${id}`, {\n      headers: this.getHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  getPositions() {\n    return this.http.get(`${this.apiUrl}/positions`).pipe(catchError(this.handleError));\n  }\n  createPosition(position) {\n    return this.http.post(`${this.apiUrl}/positions`, position, {\n      headers: this.getHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  deletePosition(id) {\n    return this.http.delete(`${this.apiUrl}/positions/${id}`, {\n      headers: this.getHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  static {\n    this.ɵfac = function EmployeeService_Factory(t) {\n      return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EmployeeService,\n      factory: EmployeeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","throwError","catchError","EmployeeService","constructor","http","authService","apiUrl","getHeaders","token","getToken","handleError","error","console","status","Error","getEmployees","get","pipe","getEmployeeById","id","createEmployee","employee","post","headers","updateEmployee","put","deleteEmployee","delete","getPositions","createPosition","position","deletePosition","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["D:\\employee-management\\src\\app\\services\\employee.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { IEmployee, IPosition } from '../interfaces/employee.interface';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeService {\r\n  private apiUrl = 'http://localhost:3000/api';\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  private getHeaders(): HttpHeaders {\r\n    const token = this.authService.getToken();\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    console.error('API Error:', error);\r\n    if (error.status === 401) {\r\n      return throwError(() => new Error('Неавторизованный доступ. Пожалуйста, войдите снова.'));\r\n    } else if (error.status === 400) {\r\n      return throwError(() => new Error(error.error?.error || 'Неверный запрос'));\r\n    } else if (error.status === 500) {\r\n      return throwError(() => new Error('Ошибка сервера. Попробуйте позже.'));\r\n    } else {\r\n      return throwError(() => new Error('Что-то пошло не так. Пожалуйста, попробуйте снова.'));\r\n    }\r\n  }\r\n\r\n  public getEmployees(): Observable<IEmployee[]> {\r\n    return this.http.get<IEmployee[]>(`${this.apiUrl}/employees`)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  public getEmployeeById(id: number): Observable<IEmployee> {\r\n    return this.http.get<IEmployee>(`${this.apiUrl}/employees/${id}`)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  public createEmployee(employee: IEmployee): Observable<IEmployee> {\r\n    return this.http.post<IEmployee>(`${this.apiUrl}/employees`, employee, { \r\n      headers: this.getHeaders() \r\n    }).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  public updateEmployee(id: number, employee: IEmployee): Observable<IEmployee> {\r\n    return this.http.put<IEmployee>(`${this.apiUrl}/employees/${id}`, employee, { \r\n      headers: this.getHeaders() \r\n    }).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  public deleteEmployee(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/employees/${id}`, { \r\n      headers: this.getHeaders() \r\n    }).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  public getPositions(): Observable<IPosition[]> {\r\n    return this.http.get<IPosition[]>(`${this.apiUrl}/positions`)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  public createPosition(position: IPosition): Observable<IPosition> {\r\n    return this.http.post<IPosition>(`${this.apiUrl}/positions`, position, { \r\n      headers: this.getHeaders() \r\n    }).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  deletePosition(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/positions/${id}`, { \r\n      headers: this.getHeaders() \r\n    }).pipe(catchError(this.handleError));\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}