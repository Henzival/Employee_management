{"ast":null,"code":"import { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  var _AuthGuard;\n  class AuthGuard {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    canActivate() {\n      return this.authService.isLoggedIn().pipe(take(1), map(isLoggedIn => {\n        // Проверяем не только наличие токена, но и его валидность\n        const isValid = this.authService.validateToken();\n        if (!isLoggedIn || !isValid) {\n          console.log('AuthGuard: Not authenticated or token invalid, redirecting to login');\n          this.authService.logout(); // Очищаем невалидный токен\n          this.router.navigate(['/login']);\n          return false;\n        }\n        console.log('AuthGuard: Access granted');\n        return true;\n      }));\n    }\n  }\n  _AuthGuard = AuthGuard;\n  _AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || _AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  _AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _AuthGuard,\n    factory: _AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}