{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let IdGeneratorService = /*#__PURE__*/(() => {\n  var _IdGeneratorService;\n  class IdGeneratorService {\n    generateEmployeeId(firstName, lastName, middleName) {\n      // Получаем текущую дату и время\n      const now = new Date();\n      // Форматируем дату: YYMMDD\n      const year = now.getFullYear().toString().slice(-2);\n      const month = (now.getMonth() + 1).toString().padStart(2, '0');\n      const day = now.getDate().toString().padStart(2, '0');\n      const datePart = `${year}${month}${day}`;\n      // Форматируем время: HHMMSS\n      const hours = now.getHours().toString().padStart(2, '0');\n      const minutes = now.getMinutes().toString().padStart(2, '0');\n      const seconds = now.getSeconds().toString().padStart(2, '0');\n      const timePart = `${hours}${minutes}${seconds}`;\n      // Берем первые буквы ФИО (кириллица поддерживается)\n      const firstChar = this.getInitials(firstName, lastName, middleName);\n      // Генерируем случайное число для дополнительной уникальности\n      const randomPart = Math.floor(Math.random() * 100).toString().padStart(2, '0');\n      return `EMP-${datePart}-${timePart}-${firstChar}-${randomPart}`;\n    }\n    getInitials(firstName, lastName, middleName) {\n      // Берем первые буквы фамилии и имени, преобразуем в верхний регистр\n      const lastInitial = lastName.charAt(0).toUpperCase();\n      const firstInitial = firstName.charAt(0).toUpperCase();\n      const middleInitial = middleName ? middleName.charAt(0).toUpperCase() : '';\n      return middleInitial ? `${lastInitial}${firstInitial}${middleInitial}` : `${lastInitial}${firstInitial}`;\n    }\n    // Альтернативный метод - только по ФИО и дате\n    generateSimpleEmployeeId(firstName, lastName, middleName) {\n      const now = new Date();\n      const datePart = now.getTime().toString(36); // timestamp в base36\n      const initials = this.getInitials(firstName, lastName, middleName);\n      return `EMP-${initials}-${datePart}`;\n    }\n    // Метод для проверки уникальности (можно расширить проверкой в базе)\n    isEmployeeIdUnique(employeeId, existingIds) {\n      return !existingIds.includes(employeeId);\n    }\n  }\n  _IdGeneratorService = IdGeneratorService;\n  _IdGeneratorService.ɵfac = function IdGeneratorService_Factory(t) {\n    return new (t || _IdGeneratorService)();\n  };\n  _IdGeneratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _IdGeneratorService,\n    factory: _IdGeneratorService.ɵfac,\n    providedIn: 'root'\n  });\n  return IdGeneratorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}