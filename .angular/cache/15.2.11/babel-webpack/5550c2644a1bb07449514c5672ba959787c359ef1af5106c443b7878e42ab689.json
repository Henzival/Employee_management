{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { combineLatest, BehaviorSubject } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nlet EmployeeListComponent = class EmployeeListComponent {\n  constructor(employeeService, authService, translationService) {\n    this.employeeService = employeeService;\n    this.authService = authService;\n    this.translationService = translationService;\n    // Фильтры как BehaviorSubject\n    this.sortBySubject = new BehaviorSubject('last_name');\n    this.filterPositionSubject = new BehaviorSubject('all');\n    // Загружаем данные\n    this.positions$ = this.employeeService.getPositions();\n    this.employees$ = this.employeeService.getEmployees();\n    this.isAdmin$ = this.authService.isLoggedIn();\n    // Создаем комбинированный Observable для позиций с количеством сотрудников\n    this.positionsWithCount$ = combineLatest([this.positions$, this.employees$.pipe(startWith([]))]).pipe(map(([positions, employees]) => {\n      return positions.map(position => ({\n        position,\n        count: employees.filter(emp => emp.position_id === position.id).length\n      }));\n    }));\n    // Комбинируем данные и фильтры\n    this.filteredEmployees$ = this.createFilteredEmployees();\n  }\n  ngOnInit() {\n    // Инициализация фильтров\n    this.filterPositionSubject.next('all');\n  }\n  createFilteredEmployees() {\n    return combineLatest([this.employees$.pipe(startWith([])), this.sortBySubject, this.filterPositionSubject]).pipe(map(([employees, sortBy, filterPosition]) => {\n      let filtered = [...employees];\n      // Фильтрация по должности\n      if (filterPosition && filterPosition !== 'all') {\n        filtered = filtered.filter(emp => emp.position_id === parseInt(filterPosition));\n      }\n      // Сортировка\n      filtered.sort((a, b) => {\n        switch (sortBy) {\n          case 'last_name':\n            return a.last_name.localeCompare(b.last_name);\n          case 'position':\n            return (a.position_name || '').localeCompare(b.position_name || '');\n          default:\n            return 0;\n        }\n      });\n      return filtered;\n    }));\n  }\n  // Методы для изменения фильтров\n  onSortChange(sortBy) {\n    this.sortBySubject.next(sortBy);\n  }\n  onPositionFilterChange(positionId) {\n    this.filterPositionSubject.next(positionId);\n  }\n  // Сброс фильтров\n  resetFilters() {\n    this.filterPositionSubject.next('all');\n    this.sortBySubject.next('last_name');\n  }\n};\nEmployeeListComponent = __decorate([Component({\n  selector: 'app-employee-list',\n  templateUrl: './employee-list.component.html',\n  styleUrls: ['./employee-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], EmployeeListComponent);\nexport { EmployeeListComponent };","map":{"version":3,"names":["ChangeDetectionStrategy","Component","combineLatest","BehaviorSubject","map","startWith","EmployeeListComponent","constructor","employeeService","authService","translationService","sortBySubject","filterPositionSubject","positions$","getPositions","employees$","getEmployees","isAdmin$","isLoggedIn","positionsWithCount$","pipe","positions","employees","position","count","filter","emp","position_id","id","length","filteredEmployees$","createFilteredEmployees","ngOnInit","next","sortBy","filterPosition","filtered","parseInt","sort","a","b","last_name","localeCompare","position_name","onSortChange","onPositionFilterChange","positionId","resetFilters","__decorate","selector","templateUrl","styleUrls","changeDetection","OnPush"],"sources":["D:\\employee-management\\src\\app\\components\\employee-list\\employee-list.component.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { Observable, combineLatest, BehaviorSubject } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { EmployeeService } from '../../services/employee.service';\r\nimport { TranslationService } from '../../services/translation.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { IEmployee, IPosition } from '../../interfaces/employee.interface';\r\n\r\n@Component({\r\n  selector: 'app-employee-list',\r\n  templateUrl: './employee-list.component.html',\r\n  styleUrls: ['./employee-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EmployeeListComponent implements OnInit {\r\n  // Observable данные\r\n  employees$: Observable<IEmployee[]>;\r\n  positions$: Observable<IPosition[]>;\r\n  isAdmin$: Observable<boolean>;\r\n  \r\n  // Фильтры как BehaviorSubject\r\n  private sortBySubject = new BehaviorSubject<string>('last_name');\r\n  private filterPositionSubject = new BehaviorSubject<string>('all');\r\n\r\n  // Комбинированный Observable для отфильтрованных сотрудников\r\n  filteredEmployees$: Observable<IEmployee[]>;\r\n\r\n  // Для удобства в шаблоне - комбинированные данные positions и employees\r\n  positionsWithCount$: Observable<{position: IPosition, count: number}[]>;\r\n\r\n  constructor(\r\n    private employeeService: EmployeeService,\r\n    private authService: AuthService,\r\n    public translationService: TranslationService\r\n  ) {\r\n    // Загружаем данные\r\n    this.positions$ = this.employeeService.getPositions();\r\n    this.employees$ = this.employeeService.getEmployees();\r\n    this.isAdmin$ = this.authService.isLoggedIn();\r\n\r\n    // Создаем комбинированный Observable для позиций с количеством сотрудников\r\n    this.positionsWithCount$ = combineLatest([\r\n      this.positions$,\r\n      this.employees$.pipe(startWith([] as IEmployee[]))\r\n    ]).pipe(\r\n      map(([positions, employees]) => {\r\n        return positions.map(position => ({\r\n          position,\r\n          count: employees.filter(emp => emp.position_id === position.id).length\r\n        }));\r\n      })\r\n    );\r\n\r\n    // Комбинируем данные и фильтры\r\n    this.filteredEmployees$ = this.createFilteredEmployees();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Инициализация фильтров\r\n    this.filterPositionSubject.next('all');\r\n  }\r\n\r\n  private createFilteredEmployees(): Observable<IEmployee[]> {\r\n    return combineLatest([\r\n      this.employees$.pipe(startWith([] as IEmployee[])),\r\n      this.sortBySubject,\r\n      this.filterPositionSubject\r\n    ]).pipe(\r\n      map(([employees, sortBy, filterPosition]) => {\r\n        let filtered = [...employees];\r\n\r\n        // Фильтрация по должности\r\n        if (filterPosition && filterPosition !== 'all') {\r\n          filtered = filtered.filter(emp =>\r\n            emp.position_id === parseInt(filterPosition)\r\n          );\r\n        }\r\n\r\n        // Сортировка\r\n        filtered.sort((a, b) => {\r\n          switch (sortBy) {\r\n            case 'last_name':\r\n              return a.last_name.localeCompare(b.last_name);\r\n            case 'position':\r\n              return (a.position_name || '').localeCompare(b.position_name || '');\r\n            default:\r\n              return 0;\r\n          }\r\n        });\r\n\r\n        return filtered;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Методы для изменения фильтров\r\n  public onSortChange(sortBy: string): void {\r\n    this.sortBySubject.next(sortBy);\r\n  }\r\n\r\n  public onPositionFilterChange(positionId: string): void {\r\n    this.filterPositionSubject.next(positionId);\r\n  }\r\n\r\n  // Сброс фильтров\r\n  public resetFilters(): void {\r\n    this.filterPositionSubject.next('all');\r\n    this.sortBySubject.next('last_name');\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}