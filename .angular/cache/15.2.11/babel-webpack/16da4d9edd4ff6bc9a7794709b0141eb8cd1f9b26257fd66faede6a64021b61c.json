{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./json-database.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(dbService) {\n      this.dbService = dbService;\n      this.isAuthenticated = new BehaviorSubject(this.hasToken());\n      this.currentUser = new BehaviorSubject(this.getStoredUser());\n      this.tokenKey = 'auth_token';\n      this.userKey = 'current_user';\n    }\n    /**\r\n     * Вход в систему\r\n     */\n    login(username, password) {\n      try {\n        // Валидация входных данных\n        if (!username || !password) {\n          return {\n            success: false,\n            error: 'Имя пользователя и пароль обязательны'\n          };\n        }\n        if (username.trim().length < 3) {\n          return {\n            success: false,\n            error: 'Имя пользователя должно содержать минимум 3 символа'\n          };\n        }\n        const result = this.dbService.validateAdmin(username.trim(), password);\n        if (result.success && result.user) {\n          // Создаем простой \"токен\" (в реальном приложении нужно использовать JWT)\n          const tokenData = {\n            id: result.user.id,\n            username: result.user.username,\n            exp: Date.now() + 24 * 60 * 60 * 1000 // 24 часа\n          };\n          const token = btoa(JSON.stringify(tokenData));\n          // Сохраняем в localStorage\n          localStorage.setItem(this.tokenKey, token);\n          localStorage.setItem(this.userKey, JSON.stringify(result.user));\n          // Обновляем состояния\n          this.isAuthenticated.next(true);\n          this.currentUser.next(result.user);\n          console.log('Успешный вход пользователя:', result.user.username);\n          return {\n            success: true,\n            user: result.user\n          };\n        }\n        return {\n          success: false,\n          error: 'Неверное имя пользователя или пароль'\n        };\n      } catch (error) {\n        console.error('Ошибка входа:', error);\n        return {\n          success: false,\n          error: 'Произошла ошибка при входе в систему'\n        };\n      }\n    }\n    /**\r\n     * Выход из системы\r\n     */\n    logout() {\n      const username = this.currentUser.value?.username;\n      localStorage.removeItem(this.tokenKey);\n      localStorage.removeItem(this.userKey);\n      this.isAuthenticated.next(false);\n      this.currentUser.next(null);\n      console.log('Пользователь вышел из системы:', username);\n    }\n    /**\r\n     * Проверка статуса аутентификации\r\n     */\n    isLoggedIn() {\n      return this.isAuthenticated.asObservable();\n    }\n    /**\r\n     * Получение текущего пользователя\r\n     */\n    getCurrentUser() {\n      return this.currentUser.asObservable();\n    }\n    /**\r\n     * Получение текущего пользователя (синхронно)\r\n     */\n    getCurrentUserSync() {\n      return this.currentUser.value;\n    }\n    /**\r\n     * Получение токена\r\n     */\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    /**\r\n     * Проверка валидности токена\r\n     */\n    validateToken() {\n      return this.hasToken();\n    }\n    /**\r\n     * Проверка прав администратора\r\n     */\n    isAdmin() {\n      return this.hasToken() && !!this.currentUser.value;\n    }\n    /**\r\n     * Получение имени текущего пользователя\r\n     */\n    getUsername() {\n      return this.currentUser.value?.username || null;\n    }\n    /**\r\n     * Получение ID текущего пользователя\r\n     */\n    getUserId() {\n      return this.currentUser.value?.id || null;\n    }\n    /**\r\n     * Обновление данных пользователя\r\n     */\n    updateUserData(user) {\n      if (this.currentUser.value?.id === user.id) {\n        this.currentUser.next(user);\n        localStorage.setItem(this.userKey, JSON.stringify(user));\n      }\n    }\n    /**\r\n     * Проверка, истек ли срок действия токена\r\n     */\n    isTokenExpired() {\n      const token = this.getToken();\n      if (!token) return true;\n      try {\n        const payload = JSON.parse(atob(token));\n        return payload.exp < Date.now();\n      } catch (error) {\n        console.error('Ошибка проверки токена:', error);\n        return true;\n      }\n    }\n    /**\r\n     * Автоматический вход при наличии валидного токена\r\n     */\n    autoLogin() {\n      if (this.hasToken() && !this.isTokenExpired()) {\n        const user = this.getStoredUser();\n        if (user) {\n          this.currentUser.next(user);\n          this.isAuthenticated.next(true);\n          console.log('Автоматический вход пользователя:', user.username);\n          return true;\n        }\n      }\n      return false;\n    }\n    /**\r\n     * Очистка данных аутентификации\r\n     */\n    clearAuthData() {\n      localStorage.removeItem(this.tokenKey);\n      localStorage.removeItem(this.userKey);\n      this.isAuthenticated.next(false);\n      this.currentUser.next(null);\n    }\n    /**\r\n     * Проверка наличия токена\r\n     */\n    hasToken() {\n      const token = this.getToken();\n      if (!token) return false;\n      try {\n        const payload = JSON.parse(atob(token));\n        const isExpired = payload.exp < Date.now();\n        if (isExpired) {\n          this.clearAuthData();\n          return false;\n        }\n        return true;\n      } catch (error) {\n        console.error('Неверный формат токена:', error);\n        this.clearAuthData();\n        return false;\n      }\n    }\n    /**\r\n     * Получение пользователя из localStorage\r\n     */\n    getStoredUser() {\n      try {\n        const userStr = localStorage.getItem(this.userKey);\n        if (!userStr) return null;\n        const user = JSON.parse(userStr);\n        return user;\n      } catch (error) {\n        console.error('Ошибка чтения пользователя из localStorage:', error);\n        return null;\n      }\n    }\n    /**\r\n     * Создание тестового администратора (для разработки)\r\n     */\n    createTestAdmin() {\n      const testAdmin = {\n        username: 'test',\n        password: 'test123'\n      };\n      try {\n        this.dbService.createAdminUser(testAdmin);\n        console.log('Тестовый администратор создан:', testAdmin.username);\n      } catch (error) {\n        console.log('Тестовый администратор уже существует');\n      }\n    }\n    /**\r\n     * Получение информации о сессии\r\n     */\n    getSessionInfo() {\n      return {\n        isAuthenticated: this.isAuthenticated.value,\n        user: this.currentUser.value,\n        tokenExists: !!this.getToken(),\n        tokenValid: this.validateToken()\n      };\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.JsonDatabaseService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}