{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class IdGeneratorService {\n  generateEmployeeId(firstName, lastName, middleName) {\n    // Получаем текущую дату и время\n    const now = new Date();\n    // Форматируем дату: YYMMDD\n    const year = now.getFullYear().toString().slice(-2);\n    const month = (now.getMonth() + 1).toString().padStart(2, '0');\n    const day = now.getDate().toString().padStart(2, '0');\n    const datePart = `${year}${month}${day}`;\n    // Форматируем время: HHMMSS\n    const hours = now.getHours().toString().padStart(2, '0');\n    const minutes = now.getMinutes().toString().padStart(2, '0');\n    const seconds = now.getSeconds().toString().padStart(2, '0');\n    const timePart = `${hours}${minutes}${seconds}`;\n    // Берем первые буквы ФИО (кириллица поддерживается)\n    const firstChar = this.getInitials(firstName, lastName, middleName);\n    // Генерируем случайное число для дополнительной уникальности\n    const randomPart = Math.floor(Math.random() * 100).toString().padStart(2, '0');\n    return `EMP-${datePart}-${timePart}-${firstChar}-${randomPart}`;\n  }\n  getInitials(firstName, lastName, middleName) {\n    // Берем первые буквы фамилии и имени, преобразуем в верхний регистр\n    const lastInitial = lastName.charAt(0).toUpperCase();\n    const firstInitial = firstName.charAt(0).toUpperCase();\n    const middleInitial = middleName ? middleName.charAt(0).toUpperCase() : '';\n    return middleInitial ? `${lastInitial}${firstInitial}${middleInitial}` : `${lastInitial}${firstInitial}`;\n  }\n  // Альтернативный метод - только по ФИО и дате\n  generateSimpleEmployeeId(firstName, lastName, middleName) {\n    const now = new Date();\n    const datePart = now.getTime().toString(36); // timestamp в base36\n    const initials = this.getInitials(firstName, lastName, middleName);\n    return `EMP-${initials}-${datePart}`;\n  }\n  // Метод для проверки уникальности (можно расширить проверкой в базе)\n  isEmployeeIdUnique(employeeId, existingIds) {\n    return !existingIds.includes(employeeId);\n  }\n  static {\n    this.ɵfac = function IdGeneratorService_Factory(t) {\n      return new (t || IdGeneratorService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: IdGeneratorService,\n      factory: IdGeneratorService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["IdGeneratorService","generateEmployeeId","firstName","lastName","middleName","now","Date","year","getFullYear","toString","slice","month","getMonth","padStart","day","getDate","datePart","hours","getHours","minutes","getMinutes","seconds","getSeconds","timePart","firstChar","getInitials","randomPart","Math","floor","random","lastInitial","charAt","toUpperCase","firstInitial","middleInitial","generateSimpleEmployeeId","getTime","initials","isEmployeeIdUnique","employeeId","existingIds","includes","factory","ɵfac","providedIn"],"sources":["D:\\employee-management\\src\\app\\shared\\services\\id-generator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IdGeneratorService {\r\n\r\n  public generateEmployeeId(firstName: string, lastName: string, middleName?: string): string {\r\n    // Получаем текущую дату и время\r\n    const now = new Date();\r\n    \r\n    // Форматируем дату: YYMMDD\r\n    const year = now.getFullYear().toString().slice(-2);\r\n    const month = (now.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = now.getDate().toString().padStart(2, '0');\r\n    const datePart = `${year}${month}${day}`;\r\n    \r\n    // Форматируем время: HHMMSS\r\n    const hours = now.getHours().toString().padStart(2, '0');\r\n    const minutes = now.getMinutes().toString().padStart(2, '0');\r\n    const seconds = now.getSeconds().toString().padStart(2, '0');\r\n    const timePart = `${hours}${minutes}${seconds}`;\r\n    \r\n    // Берем первые буквы ФИО (кириллица поддерживается)\r\n    const firstChar = this.getInitials(firstName, lastName, middleName);\r\n    \r\n    // Генерируем случайное число для дополнительной уникальности\r\n    const randomPart = Math.floor(Math.random() * 100).toString().padStart(2, '0');\r\n    \r\n    return `EMP-${datePart}-${timePart}-${firstChar}-${randomPart}`;\r\n  }\r\n\r\n  private getInitials(firstName: string, lastName: string, middleName?: string): string {\r\n    // Берем первые буквы фамилии и имени, преобразуем в верхний регистр\r\n    const lastInitial = lastName.charAt(0).toUpperCase();\r\n    const firstInitial = firstName.charAt(0).toUpperCase();\r\n    const middleInitial = middleName ? middleName.charAt(0).toUpperCase() : '';\r\n    \r\n    return middleInitial ? `${lastInitial}${firstInitial}${middleInitial}` : `${lastInitial}${firstInitial}`;\r\n  }\r\n\r\n  // Альтернативный метод - только по ФИО и дате\r\n  public generateSimpleEmployeeId(firstName: string, lastName: string, middleName?: string): string {\r\n    const now = new Date();\r\n    const datePart = now.getTime().toString(36); // timestamp в base36\r\n    const initials = this.getInitials(firstName, lastName, middleName);\r\n    \r\n    return `EMP-${initials}-${datePart}`;\r\n  }\r\n\r\n  // Метод для проверки уникальности (можно расширить проверкой в базе)\r\n  public isEmployeeIdUnique(employeeId: string, existingIds: string[]): boolean {\r\n    return !existingIds.includes(employeeId);\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}