{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let JsonDatabaseService = /*#__PURE__*/(() => {\n  class JsonDatabaseService {\n    constructor() {\n      this.dbKey = 'employee_management_db';\n      this.employeesSubject = new BehaviorSubject([]);\n      this.positionsSubject = new BehaviorSubject([]);\n      this.db = this.initializeDatabase();\n      this.loadData();\n    }\n    initializeDatabase() {\n      const defaultData = {\n        positions: [{\n          id: 1,\n          name: 'Software Developer',\n          created_at: new Date().toISOString()\n        }, {\n          id: 2,\n          name: 'Project Manager',\n          created_at: new Date().toISOString()\n        }, {\n          id: 3,\n          name: 'HR Manager',\n          created_at: new Date().toISOString()\n        }, {\n          id: 4,\n          name: 'QA Engineer',\n          created_at: new Date().toISOString()\n        }, {\n          id: 5,\n          name: 'DevOps Engineer',\n          created_at: new Date().toISOString()\n        }],\n        employees: [],\n        admin_users: [{\n          id: 1,\n          username: 'admin',\n          password: 'password',\n          created_at: new Date().toISOString()\n        }]\n      };\n      const stored = localStorage.getItem(this.dbKey);\n      if (!stored) {\n        localStorage.setItem(this.dbKey, JSON.stringify(defaultData));\n        return defaultData;\n      }\n      return JSON.parse(stored);\n    }\n    saveDatabase() {\n      localStorage.setItem(this.dbKey, JSON.stringify(this.db));\n      this.loadData();\n    }\n    loadData() {\n      // Добавляем position_name для сотрудников\n      const employeesWithPositionNames = this.db.employees.map(employee => ({\n        ...employee,\n        position_name: this.db.positions.find(p => p.id === employee.position_id)?.name || ''\n      }));\n      this.employeesSubject.next([...employeesWithPositionNames]);\n      this.positionsSubject.next([...this.db.positions]);\n    }\n    getNextId(collection) {\n      const items = this.db[collection];\n      if (items.length === 0) return 1;\n      const maxId = Math.max(...items.map(item => item.id || 0));\n      return maxId + 1;\n    }\n    // Employee methods\n    getEmployees() {\n      return this.employeesSubject.asObservable();\n    }\n    getEmployeesSync() {\n      return this.db.employees.map(employee => ({\n        ...employee,\n        position_name: this.db.positions.find(p => p.id === employee.position_id)?.name || ''\n      }));\n    }\n    getEmployeeById(id) {\n      const employee = this.db.employees.find(e => e.id === id);\n      if (!employee) return null;\n      return {\n        ...employee,\n        position_name: this.db.positions.find(p => p.id === employee.position_id)?.name || ''\n      };\n    }\n    createEmployee(employeeData) {\n      // Проверяем, существует ли employee_id\n      const existingEmployee = this.db.employees.find(e => e.employee_id === employeeData.employee_id);\n      if (existingEmployee) {\n        throw new Error('Employee ID already exists');\n      }\n      const newEmployee = {\n        ...employeeData,\n        id: this.getNextId('employees'),\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      this.db.employees.push(newEmployee);\n      this.saveDatabase();\n      return this.getEmployeeById(newEmployee.id);\n    }\n    updateEmployee(id, employeeData) {\n      const index = this.db.employees.findIndex(e => e.id === id);\n      if (index === -1) return null;\n      // Проверяем, существует ли employee_id у другого сотрудника\n      const duplicateEmployee = this.db.employees.find(e => e.employee_id === employeeData.employee_id && e.id !== id);\n      if (duplicateEmployee) {\n        throw new Error('Employee ID already exists');\n      }\n      const existingEmployee = this.db.employees[index];\n      const updatedEmployee = {\n        ...employeeData,\n        id: existingEmployee.id,\n        created_at: existingEmployee.created_at,\n        updated_at: new Date().toISOString()\n      };\n      this.db.employees[index] = updatedEmployee;\n      this.saveDatabase();\n      return this.getEmployeeById(id);\n    }\n    deleteEmployee(id) {\n      const index = this.db.employees.findIndex(e => e.id === id);\n      if (index === -1) return false;\n      this.db.employees.splice(index, 1);\n      this.saveDatabase();\n      return true;\n    }\n    // Position methods\n    getPositions() {\n      return this.positionsSubject.asObservable();\n    }\n    getPositionsSync() {\n      return [...this.db.positions];\n    }\n    createPosition(positionData) {\n      // Проверяем, существует ли должность\n      const existingPosition = this.db.positions.find(p => p.name.toLowerCase() === positionData.name.toLowerCase());\n      if (existingPosition) {\n        throw new Error('Position already exists');\n      }\n      const newPosition = {\n        ...positionData,\n        id: this.getNextId('positions'),\n        created_at: new Date().toISOString()\n      };\n      this.db.positions.push(newPosition);\n      this.saveDatabase();\n      return newPosition;\n    }\n    deletePosition(id) {\n      // Проверяем, используется ли должность сотрудниками\n      const employeesUsingPosition = this.db.employees.filter(e => e.position_id === id);\n      if (employeesUsingPosition.length > 0) {\n        throw new Error('Cannot delete position that is assigned to employees');\n      }\n      const index = this.db.positions.findIndex(p => p.id === id);\n      if (index === -1) return false;\n      this.db.positions.splice(index, 1);\n      this.saveDatabase();\n      return true;\n    }\n    // Admin methods\n    validateAdmin(username, password) {\n      const user = this.db.admin_users.find(u => u.username === username);\n      if (!user || user.password !== password) {\n        return {\n          success: false\n        };\n      }\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = user;\n      return {\n        success: true,\n        user: userWithoutPassword\n      };\n    }\n    getAdminUsers() {\n      return this.db.admin_users.map(({\n        password,\n        ...user\n      }) => user);\n    }\n    createAdminUser(userData) {\n      const existingUser = this.db.admin_users.find(u => u.username === userData.username);\n      if (existingUser) {\n        throw new Error('Username already exists');\n      }\n      const newAdmin = {\n        id: this.getNextId('admin_users'),\n        username: userData.username,\n        password: userData.password,\n        created_at: new Date().toISOString()\n      };\n      this.db.admin_users.push(newAdmin);\n      this.saveDatabase();\n      const {\n        password,\n        ...userWithoutPassword\n      } = newAdmin;\n      return userWithoutPassword;\n    }\n    deleteAdminUser(id, currentUserId) {\n      if (id === currentUserId) {\n        throw new Error('Cannot delete your own account');\n      }\n      if (id === 1) {\n        throw new Error('Cannot delete the primary admin account');\n      }\n      const index = this.db.admin_users.findIndex(u => u.id === id);\n      if (index === -1) return false;\n      this.db.admin_users.splice(index, 1);\n      this.saveDatabase();\n      return true;\n    }\n    // Вспомогательные методы для отладки\n    clearDatabase() {\n      localStorage.removeItem(this.dbKey);\n      this.db = this.initializeDatabase();\n      this.loadData();\n    }\n    exportDatabase() {\n      return JSON.stringify(this.db, null, 2);\n    }\n    importDatabase(jsonData) {\n      try {\n        const importedData = JSON.parse(jsonData);\n        this.db = importedData;\n        this.saveDatabase();\n      } catch (error) {\n        throw new Error('Invalid JSON data');\n      }\n    }\n    static {\n      this.ɵfac = function JsonDatabaseService_Factory(t) {\n        return new (t || JsonDatabaseService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: JsonDatabaseService,\n        factory: JsonDatabaseService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return JsonDatabaseService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}