{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TranslationService {\n  constructor(http) {\n    this.http = http;\n    this.currentLang = new BehaviorSubject('ru');\n    this.translations = {\n      ru: {},\n      en: {}\n    };\n    this.translationsLoaded = new BehaviorSubject(false);\n    this.loadTranslations('ru');\n    this.loadTranslations('en');\n  }\n  loadTranslations(lang) {\n    this.http.get(`../assets/i18n/${lang}.json`).pipe(catchError(error => {\n      console.error(`Error loading ${lang} translations:`, error);\n      return [{}];\n    })).subscribe(translations => {\n      this.translations[lang] = translations;\n      // Проверяем, загружены ли оба языка\n      if (this.translations['ru'] && Object.keys(this.translations['ru']).length > 0 && this.translations['en'] && Object.keys(this.translations['en']).length > 0) {\n        this.translationsLoaded.next(true);\n      }\n    });\n  }\n  translate(key) {\n    const translation = this.translations[this.currentLang.value]?.[key];\n    return translation || key;\n  }\n  setLanguage(lang) {\n    if (this.translations[lang] && Object.keys(this.translations[lang]).length > 0) {\n      this.currentLang.next(lang);\n    } else {\n      console.warn(`Translations for language ${lang} are not loaded yet`);\n    }\n  }\n  getCurrentLang() {\n    return this.currentLang.value;\n  }\n  getLanguageObservable() {\n    return this.currentLang.asObservable();\n  }\n  getTranslationsLoadedObservable() {\n    return this.translationsLoaded.asObservable();\n  }\n  // Метод для принудительной перезагрузки переводов\n  reloadTranslations(lang) {\n    return this.http.get(`../assets/i18n/${lang}.json`).pipe(tap(translations => {\n      this.translations[lang] = translations;\n    }), map(() => true), catchError(error => {\n      console.error(`Error reloading ${lang} translations:`, error);\n      return [false];\n    }));\n  }\n  static {\n    this.ɵfac = function TranslationService_Factory(t) {\n      return new (t || TranslationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TranslationService,\n      factory: TranslationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","tap","catchError","TranslationService","constructor","http","currentLang","translations","ru","en","translationsLoaded","loadTranslations","lang","get","pipe","error","console","subscribe","Object","keys","length","next","translate","key","translation","value","setLanguage","warn","getCurrentLang","getLanguageObservable","asObservable","getTranslationsLoadedObservable","reloadTranslations","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\employee-management\\src\\app\\shared\\services\\translation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, tap, catchError } from 'rxjs/operators';\r\n\r\ninterface Translations {\r\n  [key: string]: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TranslationService {\r\n  private currentLang = new BehaviorSubject<string>('ru');\r\n  private translations: { [key: string]: Translations } = {\r\n    ru: {},\r\n    en: {}\r\n  };\r\n  \r\n  private translationsLoaded = new BehaviorSubject<boolean>(false);\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.loadTranslations('ru');\r\n    this.loadTranslations('en');\r\n  }\r\n\r\n  private loadTranslations(lang: string): void {\r\n    this.http.get<Translations>(`../assets/i18n/${lang}.json`)\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error(`Error loading ${lang} translations:`, error);\r\n          return [{}];\r\n        })\r\n      )\r\n      .subscribe(translations => {\r\n        this.translations[lang] = translations;\r\n        // Проверяем, загружены ли оба языка\r\n        if (this.translations['ru'] && Object.keys(this.translations['ru']).length > 0 &&\r\n            this.translations['en'] && Object.keys(this.translations['en']).length > 0) {\r\n          this.translationsLoaded.next(true);\r\n        }\r\n      });\r\n  }\r\n\r\n  public translate(key: string): string {\r\n    const translation = this.translations[this.currentLang.value]?.[key];\r\n    return translation || key;\r\n  }\r\n\r\n  public setLanguage(lang: string): void {\r\n    if (this.translations[lang] && Object.keys(this.translations[lang]).length > 0) {\r\n      this.currentLang.next(lang);\r\n    } else {\r\n      console.warn(`Translations for language ${lang} are not loaded yet`);\r\n    }\r\n  }\r\n\r\n  public getCurrentLang(): string {\r\n    return this.currentLang.value;\r\n  }\r\n\r\n  public getLanguageObservable(): Observable<string> {\r\n    return this.currentLang.asObservable();\r\n  }\r\n\r\n  public getTranslationsLoadedObservable(): Observable<boolean> {\r\n    return this.translationsLoaded.asObservable();\r\n  }\r\n\r\n  // Метод для принудительной перезагрузки переводов\r\n  public reloadTranslations(lang: string): Observable<boolean> {\r\n    return this.http.get<Translations>(`../assets/i18n/${lang}.json`)\r\n      .pipe(\r\n        tap(translations => {\r\n          this.translations[lang] = translations;\r\n        }),\r\n        map(() => true),\r\n        catchError(error => {\r\n          console.error(`Error reloading ${lang} translations:`, error);\r\n          return [false];\r\n        })\r\n      );\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}