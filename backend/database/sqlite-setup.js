const Database = require('better-sqlite3');
const path = require('path');
const bcrypt = require('bcrypt');

const dbPath = path.join(__dirname, 'employee_management.db');
const db = new Database(dbPath);

// –í–∫–ª—é—á–µ–Ω–∏–µ foreign keys
db.pragma('foreign_keys = ON');

function initializeDatabase() {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    db.exec(`
      CREATE TABLE IF NOT EXISTS positions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    db.exec(`
      CREATE TABLE IF NOT EXISTS employees (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        employee_id TEXT UNIQUE NOT NULL,
        first_name TEXT NOT NULL,
        last_name TEXT NOT NULL,
        middle_name TEXT,
        position_id INTEGER,
        address TEXT,
        contact_email TEXT,
        contact_phone TEXT,
        salary REAL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (position_id) REFERENCES positions (id)
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    db.exec(`
      CREATE TABLE IF NOT EXISTS admin_users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password_hash TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è updated_at
    db.exec(`
      CREATE TRIGGER IF NOT EXISTS update_employee_timestamp 
      AFTER UPDATE ON employees
      FOR EACH ROW
      BEGIN
        UPDATE employees SET updated_at = CURRENT_TIMESTAMP WHERE id = OLD.id;
      END
    `);

    // –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const insertPosition = db.prepare(`
      INSERT OR IGNORE INTO positions (name) VALUES (?)
    `);

    const positions = [
      'Software Developer',
      'Project Manager', 
      'HR Manager',
      'QA Engineer',
      'DevOps Engineer'
    ];

    positions.forEach(position => insertPosition.run(position));

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–ø–∞—Ä–æ–ª—å: password)
    const passwordHash = bcrypt.hashSync('password', 10);
    const insertAdmin = db.prepare(`
      INSERT OR IGNORE INTO admin_users (username, password_hash) VALUES (?, ?)
    `);
    insertAdmin.run('admin', passwordHash);

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÅ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

module.exports = { db, initializeDatabase };